{"version":3,"file":"project.js","mappings":"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","sources":["webpack:///webpack/runtime/chunk loaded","webpack:///./src/project/project/myThreeHelper.js","webpack:///./src/project/project/myAmmoHelper.js","webpack:///./src/project/project/xzplane.js","webpack:///./src/project/project/project.js","webpack:///./src/project/project/sphere.js","webpack:///./src/project/project/triangleMeshHelpers.js","webpack:///./src/project/project/bricks.js","webpack:///./src/project/project/slidingTubeMesh.js","webpack:///./src/project/project/myAmmoFunctionsHelper.js","webpack:///./src/project/project/movableGate.js","webpack:///./src/project/project/hingedSeesaw.js","webpack:///./src/project/project/wall.js","webpack:///./src/project/project/funnelTriangleMesh.js","webpack:///./src/project/project/stopperBar.js","webpack:///./src/project/project/canonTriangleMesh.js","webpack:///./src/project/project/hingedPicture.js","webpack:///./src/project/project/particles.js","webpack:///./src/project/project/grassPlane.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/jsonp chunk loading","webpack:///webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","////////////////////////////////////////////////////////////////////\n// Det meste her er en del av kodeeksempel del4/ammoForces/box.js //\n////////////////////////////////////////////////////////////////////\n\nimport * as THREE from \"three\";\nimport GUI from \"lil-gui\";\nimport {\n\tapplyImpulse,\n\tmoveRigidBody\n} from \"./myAmmoFunctionsHelper.js\";\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls.js\";\nimport {GLTFLoader} from \"three/examples/jsm/loaders/GLTFLoader.js\";\nimport * as SkeletonUtils from \"three/examples/jsm/utils/SkeletonUtils.js\";\n\nexport let g_scene;\nexport let g_camera;\nlet g_renderer, g_controls, g_lilGui;\nlet count = 0;\n\nlet g_models = {};\n\nexport function createThreeScene() {\n\n\tconst canvas = document.createElement('canvas');\n\tdocument.body.appendChild(canvas);\t\n\t\n\tg_renderer = new THREE.WebGLRenderer({canvas: canvas, antialias: true});\n\tg_renderer.setSize(window.innerWidth, window.innerHeight);\n\tg_renderer.setClearColor(0xBFD104, 0xff);  \n\tg_renderer.shadowMap.enabled = true; \n\tg_renderer.shadowMapSoft = true;\n\tg_renderer.shadowMap.type = THREE.PCFSoftShadowMap; \n\t\n\tg_scene = new THREE.Scene();\n\tg_scene.background = new THREE.Color( 0xd6f0f0 );\n\t\n\tg_lilGui = new GUI();\n\t\n\taddSkybox();\n\taddLights();\n\t\n\tg_camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 10000);\n\tg_camera.position.x = 30;\n\tg_camera.position.y = 160;\n\tg_camera.position.z = 100;\n\t\n\tg_controls = new OrbitControls(g_camera, g_renderer.domElement);\n\tg_controls.target.set(0, 0, 0);\n\tg_controls.addEventListener( 'change', renderScene);\n}\n\n// se reamde.txt fil for mer info om skybox (static/assets/readme.txt)\nexport function addSkybox() {\n\tlet imagePrefix = \"../../../assets/skyboxes/skybox1/\";\t\n\tlet directions = [\"px\", \"nx\", \"py\", \"ny\", \"pz\", \"nz\"];\n\tlet imageSuffix = \".jpg\"; \n\tlet materialArray = [];\n\tfor (let i = 0; i < 6; i++)\n\t\tmaterialArray.push(new THREE.MeshBasicMaterial({\n\t\t\tmap:  new THREE.TextureLoader().load(imagePrefix + directions[i] + imageSuffix),\n\t\t\tside: THREE.BackSide\n\t\t}));\n\n\tlet cubeWidth = 100;\n\tlet cubeHeight = 120;\n\tlet cubeDepth = 100;\n\tlet boxGeometry = new THREE.BoxGeometry(cubeWidth, cubeHeight, cubeDepth);\n\tconst boxMesh = new THREE.Mesh(boxGeometry, materialArray);\n\tboxMesh.name = \"skyBoxMesh\";\n\tboxMesh.position.x = 0;\n\tboxMesh.position.y = 59.9;\n\tboxMesh.position.z = 0;\n\tg_scene.add(boxMesh);\n}\n\nexport function addLights() {\n\t// Ambient Light:\n\tlet ambientLight = new THREE.AmbientLight(0xffffff, 0.7);\n\tambientLight.visible = true;\n\tg_scene.add(ambientLight);\n\t\n\tconst ambientFolder = g_lilGui.addFolder( 'Ambient Light' );\n\tambientFolder.add(ambientLight, 'visible').name(\"On/Off\");\n\tambientFolder.add(ambientLight, 'intensity').min(0).max(1).step(0.01).name(\"Intensity\");\n\tambientFolder.addColor(ambientLight, 'color').name(\"Color\");\n\n\t// Directional Light:\n\tlet directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\n\tdirectionalLight.visible = true;\n\tdirectionalLight.position.set(0, 105, 0);\n\tdirectionalLight.castShadow = true;      \n\tdirectionalLight.shadow.camera.near = 0;\n\tdirectionalLight.shadow.camera.far = 301;\n\tdirectionalLight.shadow.camera.left = -50;\n\tdirectionalLight.shadow.camera.right = 50;\n\tdirectionalLight.shadow.camera.top = 250;\n\tdirectionalLight.shadow.camera.bottom = -250;\n\tdirectionalLight.shadow.camera.visible = true;\n\tg_scene.add(directionalLight);\n\n\tconst directionalFolder = g_lilGui.addFolder( 'Directional Light' );\n\tdirectionalFolder.add(directionalLight, 'visible').name(\"On/Off\");\n\tdirectionalFolder.add(directionalLight, 'intensity').min(0).max(1).step(0.01).name(\"Intensity\");\n\tdirectionalFolder.addColor(directionalLight, 'color').name(\"Color\");\n}\n \nexport function handleKeys(delta, g_currentlyPressedKeys) {\n\tconst canonBallMesh = g_scene.getObjectByName(\"canonBall\");\n\tconst lastBrick = g_scene.getObjectByName(\"brick0\");\n\n\tif (g_currentlyPressedKeys['KeyI'] || (lastBrick.position.y > 1.38 && lastBrick.position.y < 1.39)) {\n\t\tif (count === 0){\n\t\t\tapplyImpulse(canonBallMesh,{x:0, y:400, z:3});}\n\t\t\tcount++;\n\t}\n\n\tconst movableGate = g_scene.getObjectByName(\"movableGate\");\n\tif (movableGate.position.x < -9 && g_currentlyPressedKeys['KeyD']) {\t//D\n\t\tmoveRigidBody(movableGate,{x: 0.2, y: 0, z: 0});\n\t}\n}\n\nexport function onWindowResize() {\n\tg_camera.aspect = window.innerWidth / window.innerHeight;\n\tg_camera.updateProjectionMatrix();\n\tg_renderer.setSize(window.innerWidth, window.innerHeight);\n\tg_controls.handleResize();\n\trenderScene();\n}\n\n/////////////////////////////////////////////////////////////////////////////////////\n// Koden ifm lines hentet fra kodeeksempel del3/lineconnection2/lineconnection2.js //\n/////////////////////////////////////////////////////////////////////////////////////\nexport function updateThree(deltaTime) {\t\n\tlet line1MeshPosition1 = g_scene.getObjectByName(\"pictureAnchor\", true);\n\tlet line1MeshPosition2 = g_scene.getObjectByName(\"pictureWindow\", true);\n\tlet line2MeshPosition1 = g_scene.getObjectByName(\"pictureAnchor\", true);\n\tlet line2MeshPosition2 = g_scene.getObjectByName(\"pictureWindow\", true);\n\tlet line1Mesh = g_scene.getObjectByName(\"pictureFrameLineMesh1\", true);\n\tlet line2Mesh = g_scene.getObjectByName(\"pictureFrameLineMesh2\", true);\n\tconst line1VertexPositions = line1Mesh.geometry.attributes.position.array;\n\tconst line2VertexPositions = line2Mesh.geometry.attributes.position.array;\n\n\tconst frameWidth = line1MeshPosition2.geometry.parameters.width;\n\n\tconst line1Pos1 = new THREE.Vector3();\n\tconst line2Pos1 = new THREE.Vector3();\n\tline1MeshPosition1.getWorldPosition(line1Pos1);\n\tline2MeshPosition1.getWorldPosition(line2Pos1);\n\tline1VertexPositions[0] = line1Pos1.x;\n\tline1VertexPositions[1] = line1Pos1.y;\n\tline1VertexPositions[2] = line1Pos1.z;\n\tline2VertexPositions[0] = line2Pos1.x;\n\tline2VertexPositions[1] = line2Pos1.y;\n\tline2VertexPositions[2] = line2Pos1.z;\n\n\tconst line1Pos2 = new THREE.Vector3();\n\tconst line2Pos2 = new THREE.Vector3();\n\tline1MeshPosition2.getWorldPosition(line1Pos2);\n\tline2MeshPosition2.getWorldPosition(line2Pos2);\n\tline1VertexPositions[3] = line1Pos2.x - frameWidth/2;\n\tline1VertexPositions[4] = line1Pos2.y;\n\tline1VertexPositions[5] = line1Pos2.z;\n\tline2VertexPositions[3] = line2Pos2.x + frameWidth/2;\n\tline2VertexPositions[4] = line2Pos2.y;\n\tline2VertexPositions[5] = line2Pos2.z;\n\tline1Mesh.geometry.attributes.position.needsUpdate = true;\n\tline1Mesh.geometry.computeBoundingBox();\n\tline1Mesh.geometry.computeBoundingSphere();\n\tline2Mesh.geometry.attributes.position.needsUpdate = true;\n\tline2Mesh.geometry.computeBoundingBox();\n\tline2Mesh.geometry.computeBoundingSphere();\n\n\tg_controls.update();\n}\n\nexport function addMeshToScene(mesh) {\n\tg_scene.add(mesh);\n}\n\nexport function renderScene()\n{\n\tg_renderer.render(g_scene, g_camera);\n}\n\nexport function getRigidBodyFromMesh(meshName) {\n\tconst mesh = g_scene.getObjectByName(meshName);\n\tif (mesh)\n\t\treturn mesh.userData.physicsBody;\n\telse\n\t\treturn null;\n}\n\nexport function addArrowHelper(mesh, direction, origin, name, color=0xff0000, length=10) {\n\tconst meshDirectionArrow = new THREE.ArrowHelper( direction, origin, length, color );\n\tmeshDirectionArrow.name = name;\n\tmesh.add(meshDirectionArrow);\n}\n\n/////////////////////////////////////////////////////////////////////////////////////\n// Koden ifm lines hentet fra kodeeksempel del3/lineconnection2/lineconnection2.js //\n/////////////////////////////////////////////////////////////////////////////////////\nexport function addTwoLines(nameMesh1, nameMesh2) {\n\tlet line1MeshPosition1 = g_scene.getObjectByName(nameMesh1, true);\n\tlet line1MeshPosition2 = g_scene.getObjectByName(nameMesh2, true);\n\tlet line2MeshPosition1 = g_scene.getObjectByName(nameMesh1, true);\n\tlet line2MeshPosition2 = g_scene.getObjectByName(nameMesh2, true);\n\tconst lineMaterial = new THREE.LineBasicMaterial( { color: 0x721dfc } );\n\tconst points1 = [];\n\tconst points2 = [];\n\tconst startPoint1 = new THREE.Vector3();\n\tconst endPoint1 = new THREE.Vector3();\n\tconst startPoint2 = new THREE.Vector3();\n\tconst endPoint2 = new THREE.Vector3();\n\tline1MeshPosition1.getWorldPosition(startPoint1);\n\tline1MeshPosition2.getWorldPosition(endPoint1);\n\tline2MeshPosition1.getWorldPosition(startPoint2);\n\tline2MeshPosition2.getWorldPosition(endPoint2);\n\tpoints1.push(startPoint1);\n\tpoints1.push(endPoint1);\n\tpoints2.push(startPoint2);\n\tpoints2.push(endPoint2);\n\tconst lineGeometry1 = new THREE.BufferGeometry().setFromPoints( points1 );\n\tconst lineGeometry2 = new THREE.BufferGeometry().setFromPoints( points2 );\n\tconst pictureFrameLineMesh1 = new THREE.Line( lineGeometry1, lineMaterial );\n\tconst pictureFrameLineMesh2 = new THREE.Line( lineGeometry2, lineMaterial );\n\tpictureFrameLineMesh1.name = \"pictureFrameLineMesh1\";\n\tpictureFrameLineMesh2.name = \"pictureFrameLineMesh2\";\n\taddMeshToScene(pictureFrameLineMesh1);\n\taddMeshToScene(pictureFrameLineMesh2);\n}\n\n\n/////////////////////////////////////////////////////////////////////////////////////\n// Koden fra og med loadModels hentet fra kodeeksempel del6/loadgltfanimatedmodel1//\n/////////////////////////////////////////////////////////////////////////////////////\nexport function loadModels() {\n\tconst manager = new THREE.LoadingManager();\n\tmanager.onLoad = () => {\n\t\tinitModels();\n\t}\n\n\tg_models = {\n\t\tpc_nightmare_mushroom: {url: '../../../assets/models/pc_nightmare_mushroom/scene.gltf', scale: {x:0.2,y:0.2,z:0.2}, position: {x:0, y:5, z:-20}},\n\t\tpc_nightmare_mushroom1: {url: '../../../assets/models/pc_nightmare_mushroom/scene.gltf', scale: {x:0.2,y:0.2,z:0.2}, position: {x:-7, y:5, z:-17}},\n\t\tpc_nightmare_mushroom2: {url: '../../../assets/models/pc_nightmare_mushroom/scene.gltf', scale: {x:0.2,y:0.2,z:0.2}, position: {x:7, y:5, z:-22}},\n\t\tpc_nightmare_mushroom3: {url: '../../../assets/models/pc_nightmare_mushroom/scene.gltf', scale: {x:0.2,y:0.2,z:0.2}, position: {x:0, y:5, z:-10}},\n\t};\n\n\tconst gltfLoader = new GLTFLoader(manager);\n\tfor (const model of Object.values(g_models)) {\n\t\tgltfLoader.load(model.url, (gltf) => {\n\t\t\tmodel.gltf = gltf;\n\t\t});\n\t}\n\n}\n\nfunction initModels() {\n\n\tObject.values(g_models).forEach((model, index) => {\n\t\tconst clonedScene = SkeletonUtils.clone(model.gltf.scene);\n\t\tconst root = new THREE.Object3D();\n\t\troot.add(clonedScene);\n\n\t\troot.scale.set(model.scale.x, model.scale.y, model.scale.z);\n\t\troot.position.set(model.position.x, model.position.y, model.position.z);\n\t\taddMeshToScene(root);\n\t});\n}\n","//////////////////////////////////////////////////////////\n// Koden i sin helhet hentet fra del4/ammoForces/box.js //\n//////////////////////////////////////////////////////////\n\nimport * as THREE from \"three\";\n\nlet g_checkCollisions = false;\nlet g_transform;\n\nexport const COLLISION_GROUP_PLANE = 1;\nexport const COLLISION_GROUP_SPHERE = 2;\nexport const COLLISION_GROUP_MOVEABLE = 4;\nexport const COLLISION_GROUP_BOX = 8;\nexport const COLLISION_GROUP_HINGE_SPHERE = 16;\nexport const COLLISION_GROUP_HINGE_CYLINDER = 24;\nexport const COLLISION_GROUP_SPRING = 32;\nexport const COLLISION_GROUP_P2P = 64;\nexport const COLLISION_GROUP_COMPOUND = 256;\nexport const COLLISION_GROUP_CONVEX = 128;\nexport const COLLISION_GROUP_SPHERE_ANCHOR = 512;\n\nexport const IMPULSE_FORCE = 10;\n\nexport let g_ammoPhysicsWorld;\nexport let g_rigidBodies = [];\n\nexport function createAmmoWorld(checkCollisions= true) {\n\tg_checkCollisions = checkCollisions;\n\n\tg_transform = new Ammo.btTransform();           // Hjelpeobjekt.\n\n\t// Initialiserer g_ammoPhysicsWorld:\n\tlet collisionConfiguration = new Ammo.btDefaultCollisionConfiguration(),\n\t\tdispatcher = new Ammo.btCollisionDispatcher(collisionConfiguration),\n\t\toverlappingPairCache = new Ammo.btDbvtBroadphase(),\n\t\tsolver = new Ammo.btSequentialImpulseConstraintSolver();\n\n\tg_ammoPhysicsWorld = new Ammo.btDiscreteDynamicsWorld(dispatcher, overlappingPairCache, solver, collisionConfiguration);\n\tg_ammoPhysicsWorld.setGravity(new Ammo.btVector3(0, -9.80665, 0));\n}\n\nexport function createAmmoRigidBody(shape, threeMesh, restitution=0.7, friction=0.8, position={x:0, y:50, z:0}, mass=1) {\n\n\tlet transform = new Ammo.btTransform();\n\ttransform.setIdentity();\n\ttransform.setOrigin(new Ammo.btVector3(position.x, position.y, position.z));\n\n\tlet quaternion = threeMesh.quaternion;\n\ttransform.setRotation(new Ammo.btQuaternion(quaternion.x, quaternion.y, quaternion.z, quaternion.w));\n\n\tlet scale = threeMesh.scale;\n\tshape.setLocalScaling(new Ammo.btVector3(scale.x, scale.y, scale.z));\n\n\tlet motionState = new Ammo.btDefaultMotionState(transform);\n\tlet localInertia = new Ammo.btVector3(0, 0, 0);\n\tshape.calculateLocalInertia(mass, localInertia);\n\n\tlet rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n\tlet rigidBody = new Ammo.btRigidBody(rbInfo);\n\trigidBody.setRestitution(restitution);\n\trigidBody.setFriction(friction);\n\n\treturn rigidBody;\n}\n\nexport function updatePhysics(deltaTime) {\n\t// Step physics world:\n\tg_ammoPhysicsWorld.stepSimulation(deltaTime, 10);\n\n\t// Update rigid bodies\n\tfor (let i = 0; i < g_rigidBodies.length; i++) {\n\t\tlet mesh = g_rigidBodies[i];\n\t\tlet rigidBody = mesh.userData.physicsBody;\n\t\tlet motionState = rigidBody.getMotionState();\n\t\tif (motionState) {\n\t\t\tmotionState.getWorldTransform(g_transform);\n\t\t\tlet p = g_transform.getOrigin();\n\t\t\tlet q = g_transform.getRotation();\n\t\t\tmesh.position.set(p.x(), p.y(), p.z());\n\t\t\tmesh.quaternion.set(q.x(), q.y(), q.z(), q.w());\n\t\t}\n\t}\n\n\t// Kollisjonsdeteksjon:\n\tif (g_checkCollisions)\n\t\tcheckCollisions(deltaTime);\n}\n\n// Finner alle manifolds, gjennomløper og gjør noe dersom kollison mellom kulene:\nfunction checkCollisions(deltaTime) {\n\t// Finner alle mulige kollisjonspunkter/kontaktpunkter (broad phase):\n\tlet numManifolds = g_ammoPhysicsWorld.getDispatcher().getNumManifolds();\n\t// Gjennomløper alle kontaktpunkter:\n\tfor (let i=0; i < numManifolds;i++) {\n\t\t// contactManifold er et btPersistentManifold-objekt:\n\t\tlet contactManifold =  g_ammoPhysicsWorld.getDispatcher().getManifoldByIndexInternal(i);\n\t\tlet numContacts = contactManifold.getNumContacts();\n\t\tif (numContacts>0) {\n\t\t\t// Henter objektene som er involvert:\n\t\t\t// getBody0() og getBody1() returnerer et btCollisionObject,\n\t\t\t// gjøres derfor om til btRigidBody-objekter vha. Ammo.castObject():\n\t\t\tlet rbObject0 = Ammo.castObject(contactManifold.getBody0(), Ammo.btRigidBody);\n\t\t\tlet rbObject1 = Ammo.castObject(contactManifold.getBody1(), Ammo.btRigidBody);\n\t\t\tlet threeMesh0 = rbObject0.threeMesh;\n\t\t\tlet threeMesh1 = rbObject1.threeMesh;\n\t\t\tif (threeMesh0 && threeMesh1) {\n\t\t\t\tfor (let j = 0; j < numContacts; j++) {\n\t\t\t\t\tlet contactPoint = contactManifold.getContactPoint(j);\n\t\t\t\t\tconst distance = contactPoint.getDistance();\n\t\t\t\t\tif (distance <= 0) {\n\t\t\t\t\t\t// Vi har en kollisjon mellom:\n\t\t\t\t\t\tif ((threeMesh0.name === \"sphere\" && threeMesh1.name.includes(\"brick\")) ||\n\t\t\t\t\t\t\t(threeMesh1.name.includes(\"brick\") && threeMesh0.name === \"sphere\") ||\n\t\t\t\t\t\t\t(threeMesh0.name === \"sphere\" && threeMesh1.name === \"sphere\") ||\n\t\t\t\t\t\t\t(threeMesh1.name === \"sphere\" && threeMesh0.name === \"sphere\") ||\n\t\t\t\t\t\t\t(threeMesh0.name === \"pictureWindow\" && threeMesh1.name === \"canonBall\") ||\n\t\t\t\t\t\t\t(threeMesh0.name === \"canonBall\" && threeMesh1.name === \"pictureWindow\") ||\n\t\t\t\t\t\t\t(threeMesh0.name.includes(\"brick\") && threeMesh1.name.includes(\"brick\")) ||\n\t\t\t\t\t\t\t(threeMesh1.name.includes(\"brick\") && threeMesh0.name.includes(\"brick\"))\n\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Debuginfo:\n\t\t\t\t\t\t\tlet velocity0 = rbObject0.getLinearVelocity();\n\t\t\t\t\t\t\tlet velocity1 = rbObject1.getLinearVelocity();\n\t\t\t\t\t\t\tlet worldPos0 = contactPoint.get_m_positionWorldOnA();\n\t\t\t\t\t\t\tlet worldPos1 = contactPoint.get_m_positionWorldOnB();\n\t\t\t\t\t\t\tlet localPos0 = contactPoint.get_m_localPointA();\n\t\t\t\t\t\t\tlet localPos1 = contactPoint.get_m_localPointB();\n\t\t\t\t\t\t\t//console.log('Kollisjon mellom ' + threeMesh0.name + \" og \" + threeMesh1.name);\n\t\t\t\t\t\t\tconsole.log({\n\t\t\t\t\t\t\t\tmanifoldIndex: i,\n\t\t\t\t\t\t\t\tcontactIndex: j,\n\t\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t\tobject0:{\n\t\t\t\t\t\t\t\t\ttag: threeMesh0.name,\n\t\t\t\t\t\t\t\t\tvelocity: {x: velocity0.x(), y: velocity0.y(), z: velocity0.z()},\n\t\t\t\t\t\t\t\t\tworldPos: {x: worldPos0.x(), y: worldPos0.y(), z: worldPos0.z()},\n\t\t\t\t\t\t\t\t\tlocalPos: {x: localPos0.x(), y: localPos0.y(), z: localPos0.z()}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tobject1:{\n\t\t\t\t\t\t\t\t\ttag: threeMesh1.name,\n\t\t\t\t\t\t\t\t\tvelocity: {x: velocity1.x(), y: velocity1.y(), z: velocity1.z()},\n\t\t\t\t\t\t\t\t\tworldPos: {x: worldPos1.x(), y: worldPos1.y(), z: worldPos1.z()},\n\t\t\t\t\t\t\t\t\tlocalPos: {x: localPos1.x(), y: localPos1.y(), z: localPos1.z()}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (typeof threeMesh0.collisionResponse === 'function')\n\t\t\t\t\t\t\t\tthreeMesh0.collisionResponse(threeMesh0);\n\t\t\t\t\t\t\tif (typeof threeMesh1.collisionResponse === 'function')\n\t\t\t\t\t\t\t\tthreeMesh1.collisionResponse(threeMesh1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","////////////////////////////////////////////////////////////////////\n// Koden her er sin helhet basert på, inspirert av  kodeeksempel: //\n// del4/ammoAdvancedShapes2trianglemesh/xzplane.js                //\n////////////////////////////////////////////////////////////////////\n\nimport * as THREE from \"three\";\nimport {addMeshToScene} from \"./myThreeHelper.js\";\nimport {COLLISION_GROUP_HINGE_CYLINDER, createAmmoRigidBody, g_ammoPhysicsWorld, g_rigidBodies} from \"./myAmmoHelper.js\";\nimport {COLLISION_GROUP_BOX, \n\tCOLLISION_GROUP_CONVEX, \n\tCOLLISION_GROUP_PLANE, \n\tCOLLISION_GROUP_SPHERE, \n\tCOLLISION_GROUP_COMPOUND} from \"./myAmmoHelper.js\";\n\nexport let g_xzPlaneSideLength=100;\n\nexport function createXZPlane(xzPlaneSideLength) {\n\tconst mass=0;\n\tconst position = {x: 0, y: 0, z: 0};\n\tg_xzPlaneSideLength = xzPlaneSideLength;    \t \n\n\t// THREE:\n\tlet geometry = new THREE.PlaneGeometry( g_xzPlaneSideLength, g_xzPlaneSideLength, 1, 1 );\n\tgeometry.rotateX( -Math.PI / 2 );\n\tlet material = new THREE.MeshStandardMaterial( { color: 0x5b8277, side: THREE.DoubleSide } );\t\n\tlet mesh = new THREE.Mesh(geometry, material);\n\tmesh.receiveShadow = true;\n\tmesh.name = 'xzplane';\n\n\t// AMMO:\n\tlet shape = new Ammo.btBoxShape(new Ammo.btVector3(g_xzPlaneSideLength/2, 0, g_xzPlaneSideLength/2));\n\t//shape.setMargin( 0.05 );\n\tlet rigidBody = createAmmoRigidBody(shape, mesh, 0.7, 0.8, position, mass);\n\n\tmesh.userData.physicsBody = rigidBody;\n\n\t// Legger til PHYSICS WORLD:\n\tg_ammoPhysicsWorld.addRigidBody(\n\t\trigidBody,\n\t\tCOLLISION_GROUP_PLANE,\n\t\tCOLLISION_GROUP_SPHERE | \n\t\tCOLLISION_GROUP_CONVEX | \n\t\tCOLLISION_GROUP_BOX | \n\t\tCOLLISION_GROUP_COMPOUND,\n\t\tCOLLISION_GROUP_HINGE_CYLINDER);\n\n\taddMeshToScene(mesh);\n\tg_rigidBodies.push(mesh);\n\trigidBody.threeMesh = mesh; \n}\n","/////////////////////////////////////////////////////////\n// Koden her er basert på, inspirert av  kodeeksempel: //\n// del4/ammoConstraints/ammoConstraints.js             //\n/////////////////////////////////////////////////////////\n\nimport '../../style.css';\nimport * as THREE from \"three\";\nimport {\n\taddTwoLines,\n\tcreateThreeScene,\n\tg_scene,\n\thandleKeys,\n\tonWindowResize,\n\trenderScene,\n\tupdateThree,\n\tloadModels,\n\tg_camera,\n} from \"./myThreeHelper.js\";\n\nimport {\n\tcreateAmmoWorld,\n\tupdatePhysics\n} from \"./myAmmoHelper.js\";\nimport {createXZPlane} from \"./xzplane.js\";\nimport {createMovableGate} from \"./movableGate.js\";\nimport {createSphere} from \"./sphere.js\";\nimport {createFunnelTriangleMesh} from \"./funnelTriangleMesh.js\";\nimport {createHingedSeesaw} from \"./hingedSeesaw.js\";\nimport {createBricks} from \"./bricks.js\";\nimport {createCompoundStopperBar} from './stopperBar.js';\nimport {createSlidingTubeTriangleMesh} from \"./slidingTubeMesh\";\nimport {createCanonTriangleMesh} from \"./canonTriangleMesh.js\";\nimport {createHingedPicture} from \"./hingedPicture.js\";\nimport {createWall} from './wall';\nimport {createGrassPlane} from \"./grassPlane\";\n\nlet g_clock;\nconst g_currentlyPressedKeys = []\nconst XZPLANE_SIDELENGTH = 100;\n\nAmmo().then( async function( AmmoLib ) {\n\tAmmo = AmmoLib;\n\tawait main();\n} );\n\nexport async function main() {\n\n\tcreateThreeScene();\n\n\tcreateAmmoWorld(true);\n\n\tawait addAmmoSceneObjects();\n\n\tg_clock = new THREE.Clock();\n\n\twindow.addEventListener('resize', onWindowResize, false);\n\tdocument.addEventListener('keyup', handleKeyUp, false);\n\tdocument.addEventListener('keydown', handleKeyDown, false);\n\n\tanimate(0);\n}\n\nfunction handleKeyUp(event) {\n\tg_currentlyPressedKeys[event.code] = false;\n}\n\nfunction handleKeyDown(event) {\n\tg_currentlyPressedKeys[event.code] = true;\n}\n\nasync function addAmmoSceneObjects() {\n\t// sound\n\n\tloadModels()\n\n\tlet listener = new THREE.AudioListener();\n\tg_camera.add( listener );\n\tlet sound = new THREE.Audio( listener );\n\n\tlet purpleSphere = 0x8B008B;\n\tcreateXZPlane(XZPLANE_SIDELENGTH);\n\tcreateSphere(12, 70, 0x0000F2, {x:-16, y:99.0, z:17});\n\tcreateMovableGate(0x0000F2, {x:-16, y:92.7, z:17});\n\tcreateHingedSeesaw();\n\tcreateWall();\n\tcreateSphere(6, 25, 0x0000F2, {x:-15, y:7, z:44});\n\tawait createFunnelTriangleMesh();\n\tawait createSlidingTubeTriangleMesh({x: -27, y: 16, z: 0}, 0);\n\tcreateCompoundStopperBar();\n\tcreateBricks(4, 0xC28EE2, {x: 0, z: -15}, 30, sound);\n\tawait createCanonTriangleMesh();\n\tawait createHingedPicture(sound);\n\taddTwoLines(\"pictureAnchor\", \"pictureWindow\");\n\tcreateSphere(12, 10, 0xFF0000, {x:-27, y:2, z:-10});\n\tcreateSphere(8, 8, 0xFF0000, {x:30, y:20, z:5.5}, \"canonBall\");\n\tcreateSphere(7.1, 8, purpleSphere, {x:-25, y:28, z:-12});\n\n\tawait createGrassPlane(40, 20,  {x:2, y:0.5, z:-16});\n}\n\nfunction animate(currentTime, myThreeScene, myAmmoPhysicsWorld) {\n\twindow.requestAnimationFrame((currentTime) => {\n\t\tanimate(currentTime, myThreeScene, myAmmoPhysicsWorld);\n\t});\n\tlet deltaTime = g_clock.getDelta();\n\n\t//Oppdaterer grafikken:\n\tupdateThree(deltaTime);\n\n\t//Oppdaterer fysikken:\n\tupdatePhysics(deltaTime);\n\n\t//Sjekker input:\n\thandleKeys(deltaTime, g_currentlyPressedKeys);\n\n\t//Tegner scenen med gitt kamera:\n\trenderScene();\n}","////////////////////////////////////////////////////////////////////////\n// Koden for å etablere sphere basert på, inspirert av  kodeeksempel: //\n// del4/ammoConstraints/sphere.js                                     //\n////////////////////////////////////////////////////////////////////////\n\nimport * as THREE from \"three\";\nimport {addMeshToScene} from \"./myThreeHelper.js\";\nimport {createAmmoRigidBody, g_ammoPhysicsWorld, g_rigidBodies} from \"./myAmmoHelper.js\";\nimport {COLLISION_GROUP_SPHERE, \n\tCOLLISION_GROUP_COMPOUND, \n\tCOLLISION_GROUP_BOX, \n\tCOLLISION_GROUP_MOVEABLE, \n\tCOLLISION_GROUP_PLANE, \n\tCOLLISION_GROUP_CONVEX} from \"./myAmmoHelper.js\";\n\nexport function createSphere(radius = 10,mass = 10, color=0x00FF00, position={x:-30, y:70, z:30}, name = \"sphere\") {\n\tradius = radius * 0.2\n\t// THREE:\n\tlet mesh = new THREE.Mesh(\n\t\tnew THREE.SphereGeometry(radius, 32, 32),\n\t\tnew THREE.MeshStandardMaterial({color: color}));\n\tmesh.name = name;\n\tmesh.position.set(position.x, position.y, position.z);\n\tmesh.castShadow = true;\n\tmesh.receiveShadow = true;\n\tmesh.collisionResponse = (mesh1) => {\n\t\tmesh1.material.color.setHex(Math.random() * 0xffffff);\n\t};\n\n\t// AMMO:\n\tlet shape = new Ammo.btSphereShape(mesh.geometry.parameters.radius);\n\tshape.setMargin( 0.05 );\n\tlet rigidBody = createAmmoRigidBody(shape, mesh, 0.7, 0, position, mass);\n\n\tmesh.userData.physicsBody = rigidBody;\n\n\t// Legger til PHYSICS WORLD:\n\tg_ammoPhysicsWorld.addRigidBody(\n\t\trigidBody,\n\t\tCOLLISION_GROUP_SPHERE,\n\t\tCOLLISION_GROUP_SPHERE | \n\t\tCOLLISION_GROUP_COMPOUND | \n\t\tCOLLISION_GROUP_CONVEX | \n\t\tCOLLISION_GROUP_BOX | \n\t\tCOLLISION_GROUP_MOVEABLE | \n\t\tCOLLISION_GROUP_PLANE);\n\n\taddMeshToScene(mesh);\n\tg_rigidBodies.push(mesh);\n\trigidBody.threeMesh = mesh;\n}\n","////////////////////////////////////////////////////////////////////\n// Koden her er sin helhet basert på, inspirert av  kodeeksempel: //\n// del4/ammoAdvancedShapes2trianglemesh/triangleMeshHelpers.js    //\n////////////////////////////////////////////////////////////////////\n\n/**\n * Brukes til statiske objekter. Kan IKKE kollidere med hverandre.\n * @param compoundShape\n * @param mesh\n */\nexport function createTriangleShapeAddToCompound(compoundShape, mesh) {\n\tlet shape = generateTriangleShape(mesh, false);\n\taddToCompound(compoundShape, mesh, shape);\n}\n\n/**\n * Setter transformasjon på shape-objektet tilvarende mesh-objektet.\n * Legger shape-objektet til compoundShape.\n * @param compoundShape\n * @param mesh\n * @param shape\n */\nexport function addToCompound(compoundShape, mesh, shape) {\n\tlet shapeTrans = new Ammo.btTransform();\n\tshapeTrans.setIdentity();\n\tshapeTrans.setOrigin(new Ammo.btVector3(mesh.position.x,mesh.position.y,mesh.position.z));\n\tlet quat = mesh.quaternion;\n\tshapeTrans.setRotation( new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w) );\n\tcompoundShape.addChildShape(shapeTrans, shape);\n}\n\n/**\n * Oppretter og returnerer en btBvhTriangleMeshShape ELLER btConvexTriangleMeshShape og skalerer shapen i forhold til meshet.\n * MERK!\n * Rigid body-objekter basert på btBvhTriangleMeshShape kan ikke kollidere med hverandre.\n * Rigid body-objekter basert på btConvexTriangleMeshShape kan kollidere med hverandre, men har en konveks kollisjonsboks rundt seg.\n * @param mesh\n * @param useConvexShape\n * @returns {*}\n */\nexport function generateTriangleShape(mesh, useConvexShape) {\n\tlet vertices = traverseModel(mesh);\n\tlet ammoMesh = new Ammo.btTriangleMesh();\n\tfor (let i = 0; i < vertices.length; i += 9)\n\t{\n\t\tlet v1_x = vertices[i];\n\t\tlet v1_y = vertices[i+1];\n\t\tlet v1_z = vertices[i+2];\n\n\t\tlet v2_x = vertices[i+3];\n\t\tlet v2_y = vertices[i+4];\n\t\tlet v2_z = vertices[i+5];\n\n\t\tlet v3_x = vertices[i+6];\n\t\tlet v3_y = vertices[i+7];\n\t\tlet v3_z = vertices[i+8];\n\n\t\tlet bv1 = new Ammo.btVector3(v1_x, v1_y, v1_z);\n\t\tlet bv2 = new Ammo.btVector3(v2_x, v2_y, v2_z);\n\t\tlet bv3 = new Ammo.btVector3(v3_x, v3_y, v3_z);\n\n\t\tammoMesh.addTriangle(bv1, bv2, bv3);\n\t}\n\n\tlet triangleShape;\n\ttriangleShape = new Ammo.btBvhTriangleMeshShape(ammoMesh, false);\n\n\tlet threeScale = mesh.scale;\n\ttriangleShape.setLocalScaling(new Ammo.btVector3(threeScale.x, threeScale.y, threeScale.z));\n\treturn triangleShape;\n}\n\nexport function traverseModel(mesh, modelVertices=[], scaleFactor) {\n\tif (mesh) {\n\t\tif (mesh.geometry) {\n\t\t\tlet tmpVertices = [... mesh.geometry.attributes.position.array];\n\t\t\tfor (let i = 0; i < tmpVertices.length; i += 3) {\n\t\t\t\ttmpVertices[i] = tmpVertices[i] * mesh.scale.x;\n\t\t\t\ttmpVertices[i + 1] = tmpVertices[i + 1] * mesh.scale.y;\n\t\t\t\ttmpVertices[i + 2] = tmpVertices[i + 2] * mesh.scale.z;\n\t\t\t}\n\t\t\tconsole.log('** ' + mesh.type + ' Geometry' + ' [' + String(mesh.scale.x) + ',' + String(mesh.scale.y) + ',' + String(mesh.scale.z) + ']');\n\t\t\tconsole.log('mesh.scale: ' + mesh.scale.x + ', ' + mesh.scale.y + ', ' + mesh.scale.z);\n\n\t\t\tmodelVertices.push(...tmpVertices);\n\t\t} else {\n\t\t\tconsole.log('** ' + mesh.type + ' ****' + ' [' + String(mesh.scale.x) + ',' + String(mesh.scale.y) + ',' + String(mesh.scale.z) + ']');\n\t\t}\n\t}\n\tlet parentScale = mesh.scale;\n\tmesh.children.forEach((childMesh, ndx) => {\n\t\tchildMesh.scale.x = childMesh.scale.x * parentScale.x;\n\t\tchildMesh.scale.y = childMesh.scale.y * parentScale.y;\n\t\tchildMesh.scale.z = childMesh.scale.z * parentScale.z;\n\t\ttraverseModel(childMesh, modelVertices, scaleFactor);\n\t});\n\treturn modelVertices;\n}\n","///////////////////////////////////////////////////////////////////////////////////////////////////\n// Koden for å lage brikker basert på, insprirert av  kodeeksempel del4/ammoForces/box.js        //\n// Bruk av AudioLoader for a lage lyd er hentet fra https://threejs.org/docs/#api/en/audio/Audio //\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\nimport * as THREE from \"three\";\nimport {addMeshToScene} from \"./myThreeHelper.js\";\nimport {\n\tcreateAmmoRigidBody,\n\tg_ammoPhysicsWorld,\n\tg_rigidBodies,\n\tCOLLISION_GROUP_BOX,\n\tCOLLISION_GROUP_PLANE,\n\tCOLLISION_GROUP_SPHERE,\n\tCOLLISION_GROUP_COMPOUND,\n\tCOLLISION_GROUP_CONVEX\n} from \"./myAmmoHelper.js\";\n\nexport function createBricks(mass = 4, color=0xC28EE2, center={x:0, z:-15}, circlePathRad = 30, sound) {\n\tconst brickWidth = 2;\n    const brickHeight = 5;\n\tconst brickDepth = 0.5;\n    let startAngle = Math.PI/2;\n    const qtyOfBricks = 20;\n    const angleOfRot = Math.PI/qtyOfBricks;\n    let position={x:0, y:brickHeight/2, z:0};\n\n    const audioLoader = new THREE.AudioLoader();\n\n    for (let i = 0; i < qtyOfBricks; i ++)\n    {\n\n        // THREE:\n        let brickMesh = new THREE.Mesh(\n            new THREE.BoxGeometry(brickWidth, brickHeight, brickDepth, 1, 1),\n            new THREE.MeshStandardMaterial({color: color}));\n        brickMesh.rotateY(angleOfRot*(i+1));\n        brickMesh.name = 'brick' + i.toString();\n        position.x = center.x + (circlePathRad * Math.sin(startAngle + angleOfRot));\n        position.z = center.z + (circlePathRad * Math.cos(startAngle + angleOfRot));\n        startAngle += angleOfRot;\n        brickMesh.position.set(position.x, position.y, position.z);\n\n        brickMesh.castShadow = true;\n        brickMesh.receiveShadow = true;\n\n        let brickShape = new Ammo.btBoxShape( new Ammo.btVector3( brickWidth/2, brickHeight/2, brickDepth/2) );\n\n        let transform = new Ammo.btTransform();\n        transform.setIdentity();\n        transform.setOrigin(new Ammo.btVector3(brickMesh.position.x, brickMesh.position.y, brickMesh.position.z));\n        let quaternion = new THREE.Quaternion();\n        quaternion.setFromAxisAngle(new THREE.Vector3( 0, 1, 0 ), angleOfRot*(i+1));\n        transform.setRotation(new Ammo.btQuaternion( quaternion.x, quaternion.y, quaternion.z, quaternion.w ));\n\n        brickShape.setMargin( 0.05 );\n        let rigidBody = createAmmoRigidBody(brickShape, brickMesh, 0.5, 0.8, position, mass);\n        rigidBody.setActivationState(4);\n\n        brickMesh.userData.physicsBody = rigidBody;\n        let hasRun = 0\n        brickMesh.collisionResponse = () => {\n            // mesh1.material.color.setHex(Math.random() * 0xffffff);\n             if (hasRun === 0) {\n                 playSound(audioLoader, sound).then(r => console.log(r));\n             }\n             hasRun = 1;\n        };\n\n        // Legger til PHYSICS WORLD:\n        g_ammoPhysicsWorld.addRigidBody(\n            rigidBody,\n            COLLISION_GROUP_BOX,\n            COLLISION_GROUP_BOX | COLLISION_GROUP_SPHERE | COLLISION_GROUP_PLANE | COLLISION_GROUP_COMPOUND | COLLISION_GROUP_CONVEX\n        );\n\n        addMeshToScene(brickMesh);\n        g_rigidBodies.push(brickMesh);\n        rigidBody.threeMesh = brickMesh;\n    }\n}\n\n\nasync function playSound(audioLoader, sound) {\n    // lydfil https://pixabay.com/sound-effects/search/ogg/?theme=film%20%26%20special%20effects\n    await audioLoader.load('../../../assets/sounds/splat.mp3', function(buffer) {\n        sound.setBuffer(buffer);\n        sound.setLoop(false);\n        sound.setVolume(0.2);\n        sound.play()\n    });\n}","////////////////////////////////////////////////////////////////////////////////////\n// Koden for å etablere slidingTubeeMesh basert på, inspirert av  kodeeksempel:  //\n// del4/ammoAdvancedShapes2trianglemesh/helicopterTriangleMesh.js                 //\n////////////////////////////////////////////////////////////////////////////////////\n\nimport * as THREE from \"three\";\nimport {addMeshToScene} from \"./myThreeHelper.js\";\nimport {\n    COLLISION_GROUP_BOX,\n    COLLISION_GROUP_COMPOUND,\n    COLLISION_GROUP_CONVEX,\n    COLLISION_GROUP_MOVEABLE,\n    COLLISION_GROUP_PLANE,\n    COLLISION_GROUP_SPHERE,\n    createAmmoRigidBody,\n    g_ammoPhysicsWorld,\n    g_rigidBodies\n} from \"./myAmmoHelper.js\";\nimport {createTriangleShapeAddToCompound} from \"./triangleMeshHelpers\";\n\n\nexport async function createSlidingTubeTriangleMesh(position, mass) {\n    let compoundShape = new Ammo.btCompoundShape();\n    let groupMesh = new THREE.Group();\n    groupMesh.name = \"slidingTubeTriangleMesh\";\n    groupMesh.position.copy(position);\n\n    await createSlidingTubeParts(groupMesh, compoundShape);\n    // Physics\n    let rigidBody = createAmmoRigidBody(compoundShape, groupMesh, 0.4, 0.6, position, mass);\n    groupMesh.userData.physicsBody = rigidBody;\n    // Legger til physics world:\n    g_ammoPhysicsWorld.addRigidBody(\n        rigidBody,\n        COLLISION_GROUP_COMPOUND,\n        COLLISION_GROUP_CONVEX | COLLISION_GROUP_SPHERE | COLLISION_GROUP_COMPOUND| COLLISION_GROUP_MOVEABLE | COLLISION_GROUP_PLANE );\n\n    addMeshToScene(groupMesh);\n    g_rigidBodies.push(groupMesh);\n    rigidBody.threeMesh = groupMesh;\n\n}\n\nasync function createSlidingTubeParts(groupMesh, compoundShape) {\n\n    // etablering av TubeMesh er fra https://threejs.org/docs/#api/en/geometries/TubeGeometry\n    let textureLoader = new THREE.TextureLoader();\n    let texture = await textureLoader.load(\"../../../assets/textures/green_grass.jpg\");\n    let path = new TubeCurve(7);\n    let tubeGeometry = new THREE.TubeGeometry(path, 1000, 1.5, 20, false);\n    let tubeMaterial = new THREE.MeshPhongMaterial({color: 0x00ff00});\n    tubeMaterial.side = THREE.DoubleSide;\n    tubeMaterial.opacity = 0.6;\n    tubeMaterial.transparent = true;\n    let tubeMesh = new THREE.Mesh(tubeGeometry, tubeMaterial);\n    tubeMesh.name = \"tubeMesh\";\n    tubeMesh.rotation.x = Math.PI / 2;\n    tubeMesh.rotation.z = Math.PI / 3;\n    tubeMesh.castShadow = true;\n    groupMesh.add(tubeMesh);\n\n    let tubePlatform = new THREE.Group();\n    let redHex = 0xff0000;\n    // Create tube platform\n    let platformGeometry = new THREE.BoxGeometry(17, 0.3, 20);\n    let platformMaterial = new THREE.MeshPhongMaterial({color: redHex});\n    let platformMesh = new THREE.Mesh(platformGeometry, platformMaterial);\n    platformMesh.position.set(-5, 9, -8);\n    platformMesh.rotation.x = Math.PI / 10;\n    platformMesh.rotation.y = Math.PI / 10;\n\n\n    // setRandomHeights(platformGeometry)\n    // apply height\n\n    tubePlatform.add(platformMesh);\n    // create barrier\n    let barrierGeometry = new THREE.BoxGeometry(16, 4, 1);\n    let barrierMaterial = new THREE.MeshPhongMaterial({color: redHex});\n    let barrierMesh = new THREE.Mesh(barrierGeometry, barrierMaterial);\n    barrierMesh.position.set(-0, 8.5, -5);\n    barrierMesh.rotation.x = Math.PI / 10;\n    barrierMesh.rotation.y = Math.PI / 2.5;\n\n    tubePlatform.add(barrierMesh);\n\n    let secondBarrierGeometry = new THREE.BoxGeometry(7, 4, 1);\n    let secondBarrierMaterial = new THREE.MeshPhongMaterial({color: redHex});\n    let secondBarrierMesh = new THREE.Mesh(secondBarrierGeometry, secondBarrierMaterial);\n    secondBarrierMesh.position.set(-10, 8.5, 1);\n    secondBarrierMesh.rotation.x = Math.PI / 10;\n    secondBarrierMesh.rotation.y = Math.PI / 1.5;\n\n    tubePlatform.add(secondBarrierMesh);\n\n    groupMesh.add(tubePlatform);\n\n\n    tubePlatform.position.z = 0;\n    tubePlatform.position.y = 0.2;\n\n    groupMesh.rotation.y = -0.5;\n\n    //\n    createTriangleShapeAddToCompound(compoundShape, barrierMesh);\n    createTriangleShapeAddToCompound(compoundShape, platformMesh);\n    createTriangleShapeAddToCompound(compoundShape, tubeMesh);\n    createTriangleShapeAddToCompound(compoundShape, secondBarrierMesh);\n\n}\n\n// TubeCurve hentet fra https://threejs.org/docs/#api/en/geometries/TubeGeometry\nclass TubeCurve extends THREE.Curve {\n   constructor( scale = 1 ) {\n       super();\n\n         this.scale = scale;\n   }\n\n   getPoint( t, optionalTarget = new THREE.Vector3() ) {\n        let tx = Math.sin( 7.2* Math.PI * t );\n        let ty = Math.cos( 7.2 * Math.PI * t );\n        let tz = 3 * t - 1;\n\n       return optionalTarget.set( tx, ty, tz ).multiplyScalar( this.scale );\n   }\n}\n\n// textur: https://3dtextures.me/2020/08/28/grass-005/","////////////////////////////////////////////////////////////////\n// Koden her er en del av kodeeksempel del4/ammoForces/box.js //\n// del4/ammoAdvancedShapes1/compoundshape_dumbbell.js og      // \n////////////////////////////////////////////////////////////////\n\n/**\n * Flytte kinetic rigid bodies.\n * @param movableMesh\n * @param direction\n */\n export function moveRigidBody(movableMesh, direction) {\n\tlet transform = new Ammo.btTransform();\n\tlet motionState = movableMesh.userData.physicsBody.getMotionState();\n\tmotionState.getWorldTransform(transform);\n\tlet position = transform.getOrigin();\n\ttransform.setOrigin(new Ammo.btVector3(position.x() + direction.x, position.y() + direction.y, position.z() + direction.z));\n\tmotionState.setWorldTransform(transform);\n}\n\n/**\n * Flytte objekter vha. applyForce.\n * @param movableMesh\n * @param direction\n */\n\nexport function applyImpulse(mesh, direction = {x:0, y:1, z:0}) {\n\tif (!mesh.userData.physicsBody)\n\t\treturn;\n\tlet rigidBody = mesh.userData.physicsBody;\n\tlet relativeVector = new Ammo.btVector3(5, 0, 0);\n\tlet impulseVector = new Ammo.btVector3(direction.x, direction.y, direction.z);\n\trigidBody.activate(true);\n\trigidBody.applyImpulse(impulseVector, relativeVector);\n}","//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Koden for å etablere movableGate basert på, insprirert av  kodeeksempel:                                 //\n// del4/ammoConstraints/movable.js                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nimport * as THREE from \"three\";\nimport {addMeshToScene} from \"./myThreeHelper.js\";\nimport {\n\tcreateAmmoRigidBody,\n\tg_ammoPhysicsWorld,\n\tg_rigidBodies,\n\tCOLLISION_GROUP_MOVEABLE,\n\tCOLLISION_GROUP_SPHERE,\n\tCOLLISION_GROUP_CONVEX\n} from \"./myAmmoHelper.js\";\n\nexport function createMovableGate(color=0x00A6E5, position={x:-10, y:0, z:-30}) {\n\tconst dimension1 = 5.5;\n\tconst dimension2 = 0.5;\n\tconst dimension3 = 5.9;\n\tconst mass = 0;\n\n\t// THREE:\n\tlet mesh = new THREE.Mesh(\n\t\tnew THREE.BoxGeometry(dimension1, dimension2, dimension3, 1, 1),\n\t\tnew THREE.MeshStandardMaterial({color: color}));\n\tmesh.name = 'movableGate';\n\tposition.y = position.y + mesh.scale.y*dimension1/2;\n\tmesh.position.set(position.x, position.y, position.z);\n\tmesh.castShadow = true;\n\tmesh.receiveShadow = true;\n\n\t// AMMO:\n\tlet width = mesh.geometry.parameters.width;\n\tlet height = mesh.geometry.parameters.height;\n\tlet depth = mesh.geometry.parameters.depth;\n\n\n\tlet shape = new Ammo.btBoxShape( new Ammo.btVector3( width/2, height/2, depth/2) );\n\tlet rigidBody = createAmmoRigidBody(shape, mesh, 0.7, 0.8, position, mass);\n\t// Følgende er avgjørende for å kunne flytte på objektet:\n\t// 2 = BODYFLAG_KINEMATIC_OBJECT: Betyr kinematic object, masse=0 men kan flyttes!\n\trigidBody.setCollisionFlags(rigidBody.getCollisionFlags() | 2);\n\t// 4 = BODYSTATE_DISABLE_DEACTIVATION, dvs. \"Never sleep\".\n\trigidBody.setActivationState(4);\n\tmesh.userData.physicsBody = rigidBody;\n\n\t// Legger til PHYSICS WORLD:\n\tg_ammoPhysicsWorld.addRigidBody(\n\t\trigidBody,\n\t\tCOLLISION_GROUP_MOVEABLE,\n\t\t\tCOLLISION_GROUP_SPHERE |\n\t\t\tCOLLISION_GROUP_CONVEX\n\t);\n\n\taddMeshToScene(mesh);\n\tg_rigidBodies.push(mesh);\n\trigidBody.threeMesh = mesh;\n}\n","//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Koden for å etablere hingedSeesaw basert på, insprirert av  kodeeksempel:                                //\n// del4/ammoAdvancedShapes1/compoundshape_dumbbell.js og                                                    //\n// del4/ammoAdvancedShapes1/compoundshape_tv.js og                                                          //\n// del4/ammoConstraints/hingedarm.js                                                                        //\n// Bruk av colission.Response er basert på koden fra sphere.js                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nimport * as THREE from \"three\";\nimport {createAmmoRigidBody, g_ammoPhysicsWorld, g_rigidBodies} from \"./myAmmoHelper\";\nimport {addArrowHelper, addMeshToScene} from \"./myThreeHelper\";\nimport {\n\tCOLLISION_GROUP_BOX, \n\tCOLLISION_GROUP_COMPOUND,\n\tCOLLISION_GROUP_CONVEX,\n    COLLISION_GROUP_HINGE_CYLINDER,\n\tCOLLISION_GROUP_MOVEABLE,\n\tCOLLISION_GROUP_PLANE,\n\tCOLLISION_GROUP_SPHERE\n} from \"./myAmmoHelper\";\n\nexport function createHingedSeesaw(mass = 10, color=0x00FF00, position={x:0, y:0, z:0}) {\n\n\tconst rigidBodyBeam = createCompoundBeam();\n\tconst rigidBodyAnchor = createAnchor();\n\tconst beamLength = rigidBodyBeam.threeMesh.children[0].geometry.parameters.width;\n\tconst beamHalfHeight = rigidBodyBeam.threeMesh.children[0].geometry.parameters.height/2;\n\tconst anchorRadius = rigidBodyAnchor.threeMesh.geometry.parameters.radiusTop;\n\n\tconst anchorPivot = new Ammo.btVector3( 0, anchorRadius + beamHalfHeight, 0 );\n\tconst anchorAxis = new Ammo.btVector3(1,0,0);\n\tconst beamPivot = new Ammo.btVector3( 0, 0, 0 );\n\tconst beamAxis = new Ammo.btVector3(1,0,0);\n\tconst hingeConstraint = new Ammo.btHingeConstraint(\n\t\trigidBodyAnchor,\n\t\trigidBodyBeam,\n\t\tanchorPivot,\n\t\tbeamPivot,\n\t\tanchorAxis,\n\t\tbeamAxis,\n\t\tfalse\n\t);\n\n\tconst lowerLimit = -Math.PI/12;\n\tconst upperLimit = Math.PI/12;\n\tconst softness = 0.9;\n\tconst biasFactor = 0.1;\n\tconst relaxationFactor = 0.1;\n\thingeConstraint.setLimit( lowerLimit, upperLimit, softness, biasFactor, relaxationFactor);\n\thingeConstraint.enableAngularMotor(true, 0, 0.4);\n\tg_ammoPhysicsWorld.addConstraint( hingeConstraint, false );\n\tg_ammoPhysicsWorld.addConstraint( hingeConstraint, false );\n}\n\nexport function createCompoundBeam() {\n\tconst mass=2;\n\tlet beamSize = {width: 30, height: 1, depth: 3};\n\tlet beamPosition={x:0, y:0, z:0};\n\tlet pocketBlockSize = {width:3.5, height:1.5, depth:0.5};\n\tlet pocketBlockPosition ={x:0, y:beamSize.height/2 + pocketBlockSize.height/2, z:beamSize.width/2 - pocketBlockSize.depth/2};\n\tlet compoundBeamPosition = {x:-15, y:2.5, z:32};\n\tlet compoundMesh = new THREE.Group();\n\tcompoundMesh.userData.tag = 'compoundBeam';\n\n\t// THREE:\n    // Beam\n\tlet geometryBeam = new THREE.BoxGeometry(beamSize.width, beamSize.height, beamSize.depth, 1, 1);\n\tlet meshBeam = new THREE.Mesh(geometryBeam, new THREE.MeshPhongMaterial({color: 0xf78a1d}));\n\tgeometryBeam.rotateY(Math.PI/2);\n\tmeshBeam.position.set(beamPosition.x, beamPosition.y, beamPosition.z);\n\tmeshBeam.castShadow = true;\n\tcompoundMesh.add(meshBeam);\n\t// Sphere pocket block 1\n\tlet geometryBlock1 = new THREE.BoxGeometry(pocketBlockSize.width, pocketBlockSize.height, pocketBlockSize.depth, 1, 1);\n\tlet meshBlock1 = new THREE.Mesh(geometryBlock1, new THREE.MeshPhongMaterial({color: 0x9DB031}));\n\tmeshBlock1.position.set(pocketBlockPosition.x, pocketBlockPosition.y, pocketBlockPosition.z);\n\tmeshBlock1.castShadow = true;\n\tcompoundMesh.add(meshBlock1);\n\t// Sphere pocket block 2\n\tlet geometryBlock2 = new THREE.BoxGeometry(pocketBlockSize.width, pocketBlockSize.height, pocketBlockSize.depth, 1, 1);\n\tlet meshBlock2 = new THREE.Mesh(geometryBlock2, new THREE.MeshPhongMaterial({color: 0x9DB031}));\n\tgeometryBlock2.rotateY(Math.PI/2);\n\tmeshBlock2.position.set(\n\t\tpocketBlockPosition.x - pocketBlockSize.width/2 + pocketBlockSize.depth/2, \n\t\tpocketBlockPosition.y, \n\t\tpocketBlockPosition.z - pocketBlockSize.width/2 + pocketBlockSize.depth/2);\n\tmeshBlock2.castShadow = true;\n\tcompoundMesh.add(meshBlock2);\n\t// Sphere pocket block 3\n\tlet geometryBlock3 = new THREE.BoxGeometry(pocketBlockSize.width, pocketBlockSize.height, pocketBlockSize.depth, 1, 1);\n\tlet meshBlock3 = new THREE.Mesh(geometryBlock3, new THREE.MeshPhongMaterial({color: 0x9DB031}));\n\tgeometryBlock3.rotateY(Math.PI/2);\n\tmeshBlock3.position.set(\n\t\tpocketBlockPosition.x + pocketBlockSize.width/2 - pocketBlockSize.depth/2, \n\t\tpocketBlockPosition.y, \n\t\tpocketBlockPosition.z - pocketBlockSize.width/2 + pocketBlockSize.depth/2);\n\tmeshBlock3.castShadow = true;\n\tcompoundMesh.add(meshBlock3);\n\t// Sphere pocket block 4\n\tlet geometryBlock4 = new THREE.BoxGeometry(pocketBlockSize.width, pocketBlockSize.height, pocketBlockSize.depth, 1, 1);\n\tlet meshBlock4 = new THREE.Mesh(geometryBlock4, new THREE.MeshPhongMaterial({color: 0x9DB031}));\n\tmeshBlock4.position.set(\n\t\tpocketBlockPosition.x, \n\t\tpocketBlockPosition.y, \n\t\tpocketBlockPosition.z - pocketBlockSize.width + pocketBlockSize.depth);\n\tmeshBlock4.castShadow = true;\n\tcompoundMesh.add(meshBlock4);\n\n\tcompoundMesh.castShadow = true;\n\tcompoundMesh.receiveShadow = true;\n\n\t// AMMO:\n\tlet compoundShape = new Ammo.btCompoundShape();\n\tlet beamShape = new Ammo.btBoxShape(new Ammo.btVector3(beamSize.width/2, beamSize.height/2, beamSize.depth/2));\n\tlet pocketBlockShape = new Ammo.btBoxShape(new Ammo.btVector3(\n\t\tpocketBlockSize.width/2, pocketBlockSize.height/2, pocketBlockSize.depth/2));\n\n\t// Beam\n\tlet transform1 = new Ammo.btTransform();\n\ttransform1.setIdentity();\n\ttransform1.setOrigin(new Ammo.btVector3(meshBeam.position.x, meshBeam.position.y, meshBeam.position.z));\n\tlet quaternion1 = new THREE.Quaternion();\n\tquaternion1.setFromAxisAngle(new THREE.Vector3( 0, 1, 0 ), Math.PI/2);\n\ttransform1.setRotation(new Ammo.btQuaternion( quaternion1.x, quaternion1.y, quaternion1.z, quaternion1.w ));\n\tcompoundShape.addChildShape(transform1, beamShape);\n\t// PocketBlock1\n\tlet transform2 = new Ammo.btTransform();\n\ttransform2.setIdentity();\n\ttransform2.setOrigin(new Ammo.btVector3(meshBlock1.position.x, meshBlock1.position.y, meshBlock1.position.z));\n\tcompoundShape.addChildShape(transform2, pocketBlockShape);\n\t// PocketBlock2\n\tlet transform3 = new Ammo.btTransform();\n\ttransform3.setIdentity();\n\ttransform3.setOrigin(new Ammo.btVector3(meshBlock2.position.x, meshBlock2.position.y, meshBlock2.position.z));\n\tlet quaternion3 = new THREE.Quaternion();\n\tquaternion3.setFromAxisAngle(new THREE.Vector3( 0, 1, 0 ), Math.PI/2);\n\ttransform3.setRotation(new Ammo.btQuaternion( quaternion3.x, quaternion3.y, quaternion3.z, quaternion3.w ));\n\tcompoundShape.addChildShape(transform3, pocketBlockShape);\n\t// PocketBlock3\n\tlet transform4 = new Ammo.btTransform();\n\ttransform4.setIdentity();\n\ttransform4.setOrigin(new Ammo.btVector3(meshBlock3.position.x, meshBlock3.position.y, meshBlock3.position.z));\n\tlet quaternion4 = new THREE.Quaternion();\n\tquaternion4.setFromAxisAngle(new THREE.Vector3( 0, 1, 0 ), Math.PI/2);\n\ttransform4.setRotation(new Ammo.btQuaternion( quaternion4.x, quaternion4.y, quaternion4.z, quaternion4.w ));\n\tcompoundShape.addChildShape(transform4, pocketBlockShape);\n\t// PocketBlock4\n\tlet transform5 = new Ammo.btTransform();\n\ttransform5.setIdentity();\n\ttransform5.setOrigin(new Ammo.btVector3(meshBlock4.position.x, meshBlock4.position.y, meshBlock4.position.z));\n\tcompoundShape.addChildShape(transform5, pocketBlockShape);\n\n\tcompoundShape.setMargin( 0.05 );\n\n\tlet rigidBody = createAmmoRigidBody(compoundShape, compoundMesh, 0.3, 0.0, compoundBeamPosition, mass);\n\trigidBody.setDamping(0.1, 0.5);\n\trigidBody.setActivationState(4);\n\tcompoundMesh.userData.physicsBody = rigidBody;\n\n\t// Legger til PHYSICS WORLD:\n\tg_ammoPhysicsWorld.addRigidBody(\n\t\trigidBody,\n\t\tCOLLISION_GROUP_COMPOUND,\n\t\t\tCOLLISION_GROUP_SPHERE |\n\t\t\tCOLLISION_GROUP_COMPOUND |\n\t\t\tCOLLISION_GROUP_HINGE_CYLINDER |\n\t\t\tCOLLISION_GROUP_CONVEX |\n\t\t\tCOLLISION_GROUP_BOX |\n\t\t\tCOLLISION_GROUP_MOVEABLE |\n\t\t\tCOLLISION_GROUP_PLANE );\n\n\taddMeshToScene(compoundMesh);\n\tg_rigidBodies.push(compoundMesh);\n\trigidBody.threeMesh = compoundMesh;\n\treturn rigidBody;\n}\n\nexport function createAnchor(color=0xb846db) {\n\tlet anchorSize ={radiusTop:2, radiusBottom:2, height:5};\n\tlet anchorPosition={x:-15, y:anchorSize.radiusTop, z:30};\n\tconst mass = 0;\n\n\t// THREE:\n\tlet geometryAnchor = new THREE.CylinderGeometry(anchorSize.radiusTop, anchorSize.radiusBottom, anchorSize.height);\n\tgeometryAnchor.rotateZ(-Math.PI/2);\n\tconst mesh = new THREE.Mesh(geometryAnchor, new THREE.MeshStandardMaterial({color: color}));\n\tmesh.name = 'seesawAnchor';\n\tmesh.position.set(anchorPosition.x, anchorPosition.y, anchorPosition.z);\n\tmesh.castShadow = true;\n\tmesh.receiveShadow = true;\n\tmesh.collisionResponse = (mesh1) => {\n\t\tmesh1.material.color.setHex(Math.random() * 0xffffff);\n\t\t\n\t};\n\t// AMMO:\n\tconst anchorShape = new Ammo.btCylinderShape(new Ammo.btVector3(anchorSize.radiusTop, anchorSize.radiusBottom, anchorSize.height/2));\n\tanchorShape.setMargin( 0.05 );\n\tconst rigidBody = createAmmoRigidBody(anchorShape, mesh, 0.4, 0.6, anchorPosition, mass);\n\tmesh.userData.physicsBody = rigidBody;\n\tg_ammoPhysicsWorld.addRigidBody(\n\t\trigidBody,\n\t\tCOLLISION_GROUP_HINGE_CYLINDER,\n\t\tCOLLISION_GROUP_SPHERE | \n\t\tCOLLISION_GROUP_BOX | \n\t\tCOLLISION_GROUP_COMPOUND| \n\t\tCOLLISION_GROUP_MOVEABLE | \n\t\tCOLLISION_GROUP_CONVEX | \n\t\tCOLLISION_GROUP_PLANE );\n\tg_rigidBodies.push(mesh);\n\trigidBody.threeMesh = mesh;\n\n\taddMeshToScene(mesh);\n\tg_rigidBodies.push(mesh);\n\trigidBody.threeMesh = mesh;\n\n\treturn rigidBody;\n}","/////////////////////////////////////////////////////////\n// Koden her er basert på, inspirert av  kodeeksempel: //\n// del4/ammoAdvancedShapes1/box.js                     //\n/////////////////////////////////////////////////////////\n\nimport * as THREE from \"three\";\nimport {addMeshToScene} from \"./myThreeHelper.js\";\nimport {\n\tcreateAmmoRigidBody,\n\tg_ammoPhysicsWorld,\n\tg_rigidBodies,\n\tCOLLISION_GROUP_BOX,\n\tCOLLISION_GROUP_PLANE,\n\tCOLLISION_GROUP_SPHERE,\n\tCOLLISION_GROUP_MOVEABLE,\n\tCOLLISION_GROUP_COMPOUND,\n} from \"./myAmmoHelper.js\";\n\nexport async function createWall(mass = 0, position={x:3, y:5, z:-5}) {\n    const width = 42;\n    const height = 10;\n    const depth = 1;\n\n\t//THREE\n    const loader = new THREE.TextureLoader();\n    // glass_window.jpg bilde er hentet fra: \n    // https://www.vecteezy.com/free-vector/seamless-brick-pattern\n\tconst wallTexture = await loader.loadAsync('../../../assets/textures/brick-wall.jpg');\n\n\tlet mesh = new THREE.Mesh(\n\t\tnew THREE.BoxGeometry(width, height, depth, 1, 1),\n\t\tnew THREE.MeshStandardMaterial({map: wallTexture}));\n\tmesh.name = 'box';\n\tmesh.position.set(position.x, position.y, position.z);\n\tmesh.castShadow = true;\n\tmesh.receiveShadow = true;\n\n\t//AMMO\n\tlet shape = new Ammo.btBoxShape( new Ammo.btVector3( width/2, height/2, depth/2) );\n\tshape.setMargin( 0.05 );\n\tlet rigidBody = createAmmoRigidBody(shape, mesh, 0.7, 0.8, position, mass);\n\trigidBody.setActivationState(4);\n\tmesh.userData.physicsBody = rigidBody;\n\n\tg_ammoPhysicsWorld.addRigidBody(\n\t\trigidBody,\n\t\tCOLLISION_GROUP_BOX,\n\t\tCOLLISION_GROUP_BOX | \n        COLLISION_GROUP_SPHERE | \n        COLLISION_GROUP_MOVEABLE | \n        COLLISION_GROUP_PLANE | \n        COLLISION_GROUP_COMPOUND\n\t);\n\n\taddMeshToScene(mesh);\n\tg_rigidBodies.push(mesh);\n\trigidBody.threeMesh = mesh;\n}","/////////////////////////////////////////////////////////////////////////////////////\n// Koden for å etablere funnelTriangleMesh basert på, insprirert av  kodeeksempel: //\n// del4/ammoAdvancedShapes2trianglemesh/helicopterTriangleMesh.js                  //\n/////////////////////////////////////////////////////////////////////////////////////\n\nimport * as THREE from \"three\";\nimport {\n\tcreateAmmoRigidBody,\n\tg_rigidBodies,\n\tg_ammoPhysicsWorld,\n\tCOLLISION_GROUP_CONVEX,\n\tCOLLISION_GROUP_SPHERE,\n\tCOLLISION_GROUP_BOX,\n\tCOLLISION_GROUP_MOVEABLE,\n\tCOLLISION_GROUP_PLANE,\n} from \"./myAmmoHelper.js\";\nimport {addMeshToScene} from \"./myThreeHelper.js\";\nimport {createTriangleShapeAddToCompound} from \"./triangleMeshHelpers.js\";\n\n// MERK! Her brukes btConvexTriangleMeshShape.\nexport async function createFunnelTriangleMesh(mass = 0, color = 0xf78a1d, position={x:-16, y:100, z:17}) {\n\t//Ammo-container:\n\tlet compoundShape = new Ammo.btCompoundShape();\n\t//Three-container:\n\tlet groupMesh = new THREE.Group();\n\tgroupMesh.userData.tag = 'funnel';\n\tgroupMesh.position.x = -15;\n\tgroupMesh.position.y = 10;\n\tgroupMesh.position.z = 20;\n\tgroupMesh.scale.set(4,5,4);\n\n\tawait createFunnelParts(groupMesh, compoundShape);\n\n\t// Sett samme transformasjon på compoundShape som på bottomMesh:\n\tlet rigidBody = createAmmoRigidBody(compoundShape, groupMesh, 0.4, 0.6, position, mass);\n\tgroupMesh.userData.physicsBody = rigidBody;\n\t\n\t// Legger til PHYSICS WORLD:\n\tg_ammoPhysicsWorld.addRigidBody(\n\t\trigidBody,\n\t\tCOLLISION_GROUP_CONVEX,\n\t\tCOLLISION_GROUP_CONVEX | COLLISION_GROUP_SPHERE | COLLISION_GROUP_BOX | COLLISION_GROUP_MOVEABLE | COLLISION_GROUP_PLANE );\n\n\taddMeshToScene(groupMesh);\n\tg_rigidBodies.push(groupMesh);\n\trigidBody.threeMesh = groupMesh;\n}\n\n/**\n * Lager både tree- og ammoobjekter.\n * @param groupMesh\n * @param compoundShape\n */\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n// Delen for å etablere egendefinert funnel geometri basert på, insprirert av  kodeeksempel: //\n// del2/shapes/shapes.js                                                                     //\n///////////////////////////////////////////////////////////////////////////////////////////////\nasync function createFunnelParts(groupMesh, compoundShape) {\n\tlet boxBottomOffset = 0.6;\n\tlet boxSideOffset = 0.8;\n\t// GEOMETRY - Funnel top box //\n\tconst startBoxGeometry = new THREE.BufferGeometry();\n\tconst startBoxVertices = new Float32Array( [\n\t\t\t\n\t//FRONT\n\t-1, -1, 1, \n\t-1, 1, 1, \n\t1, 1, 1, \n\t1, 1, 1, \n\t-1, -1, 1, \n\t1, -1, 1,\n\t\n\t//RIGHT\n\t1, 1, 1,\n\t1, -boxSideOffset, 1, \n\t1, -boxSideOffset, -1, \n\t1, -boxSideOffset, -1, \n\t1, 1, 1, \n\t1, 1, -1,\n\t\n\t//BACK\n\t-1, 1, -1, \n\t-1, -1, -1, \n\t1, 1, -1, \n\t1, 1, -1, \n\t-1, -1, -1, \n\t1, -1, -1,\n\t\n\t//LEFT\n\t-1, -1, 1, \n\t-1, 1, 1, \n\t-1, -1, -1, \n\t-1, -1, -1, \n\t-1, 1, 1, \n\t-1, 1, -1,\n\t\n\t//BOTTOM\n\t-1, -1, -1, \n\t-1, -1, 1, \n\t-boxBottomOffset, -1, -1, \n\t-boxBottomOffset, -1, -1, \n\t-boxBottomOffset, -1, 1, \n\t-1, -1, 1,\n\tboxBottomOffset, -1, -1, \n\t1, -1, -1, \n\t1, -1, 1, \n\tboxBottomOffset, -1, -1, \n\tboxBottomOffset, -1, 1, \n\t1, -1, 1,\n\t-boxBottomOffset, -1, -1, \n\tboxBottomOffset, -1, -1, \n\tboxBottomOffset, -1, -boxBottomOffset, \n\tboxBottomOffset, -1, -boxBottomOffset,\n\t-boxBottomOffset, -1, -boxBottomOffset,\n\t-boxBottomOffset, -1, -1,\n\t-boxBottomOffset, -1, 1,\n\t-boxBottomOffset, -1, boxBottomOffset,\n\tboxBottomOffset, -1, boxBottomOffset,\n\tboxBottomOffset, -1, boxBottomOffset,\n\tboxBottomOffset, -1, 1,\n\t-boxBottomOffset, -1, 1\n\t\t] );\n\n\t// itemSize = 3 pga. 3 verdier per vertex:\n\tstartBoxGeometry.setAttribute( 'position', new THREE.BufferAttribute( startBoxVertices, 3 ) );\n\tlet startBoxMaterial = new THREE.MeshPhongMaterial({ color: 0x808000, side: THREE.DoubleSide, transparent: true, opacity: 0.6});\n\tstartBoxMaterial.transparent = true;\n\tlet startBoxMesh = new THREE.Mesh(startBoxGeometry, startBoxMaterial);\n\tstartBoxMesh.castShadow = true;\n\tstartBoxMesh.name = \"startBox\";\n\tstartBoxMesh.position.x = 0;\n\tstartBoxMesh.position.y = 0;\n\tstartBoxMesh.position.z = 0;\n\tgroupMesh.add(startBoxMesh);\n\tcreateTriangleShapeAddToCompound(compoundShape, startBoxMesh);\n}\n","/////////////////////////////////////////////////////////\n// Koden her er basert på, inspirert av  kodeeksempel: //\n// del4/ammoAdvancedShapes1/compoundshape_dumbbell.js  //\n/////////////////////////////////////////////////////////\n\nimport * as THREE from \"three\";\nimport {\n\tcreateAmmoRigidBody,\n\tg_rigidBodies,\n\tg_ammoPhysicsWorld,\n\tCOLLISION_GROUP_SPHERE,\n\tCOLLISION_GROUP_BOX,\n\tCOLLISION_GROUP_MOVEABLE,\n\tCOLLISION_GROUP_PLANE,\n\tCOLLISION_GROUP_COMPOUND,\n\tCOLLISION_GROUP_CONVEX\n} from \"./myAmmoHelper.js\";\nimport {addMeshToScene} from \"./myThreeHelper.js\";\n\nexport function createCompoundStopperBar(mass = 10, position={x:-33, y:27.7, z:-9}) {\n\t// THREE:\n    const lWidth = 14;\n    const lHeight = 2.5;\n    const lDepth = 2.5;\n    const rWidth = 20;\n    const rHeight = lHeight;\n    const rDepth = lDepth;\n    const sWidth = 10;\n    const sHeight = 0.5;\n    const sDepth = 20;\n\n\t// 1.Rod:\n\tlet compoundMesh = new THREE.Group();\n\tcompoundMesh.userData.tag = 'compoundBar';\n\tlet geometryLeftBar = new THREE.BoxGeometry(lWidth, lHeight, lDepth);\n\tlet meshLeftBar = new THREE.Mesh(geometryLeftBar, new THREE.MeshPhongMaterial({color: 0xf78a1d}));\n    meshLeftBar.rotateY(-Math.PI/2);\n\tmeshLeftBar.position.set(0, 0, 0);\n\tmeshLeftBar.castShadow = true;\n\tcompoundMesh.add(meshLeftBar);\n\t// 2.Left bar:\n\tlet geometryRightBar = new THREE.BoxGeometry(rWidth, rHeight, rDepth);\n\tlet meshRightBar = new THREE.Mesh(geometryRightBar, new THREE.MeshPhongMaterial({color: 0xf78a1d}));\n    meshRightBar.rotateY(Math.PI/4);\n\tmeshRightBar.position.set(10, 0, 0);\n\tmeshRightBar.castShadow = true;\n\tcompoundMesh.add(meshRightBar);\n    // 3.Senter bar\n\tlet geometryCenterBar = new THREE.BoxGeometry(sWidth, sHeight, sDepth);\n\tlet meshCenterBar = new THREE.Mesh(geometryCenterBar, new THREE.MeshPhongMaterial({color: 0xf78a1d}));\n    meshCenterBar.rotateY(Math.PI/10);\n\tmeshCenterBar.position.set(20, 0, 11);\n\tmeshCenterBar.castShadow = true;\n\tcompoundMesh.add(meshCenterBar);\n\n\t// AMMO:\n\tlet compoundShape = new Ammo.btCompoundShape();\n\tlet leftBarShape = new Ammo.btBoxShape(new Ammo.btVector3(lWidth/2, lHeight/2, lDepth/2));\n    let rightBarShape = new Ammo.btBoxShape(new Ammo.btVector3(rWidth/2, rHeight/2, rDepth/2));\n    let centerBarShape = new Ammo.btBoxShape(new Ammo.btVector3(sWidth/2, sHeight/2, sDepth/2));\n\n\t// 1.LeftBar\n\tlet transform1 = new Ammo.btTransform();\n\ttransform1.setIdentity();\n\ttransform1.setOrigin(new Ammo.btVector3(meshLeftBar.position.x, meshLeftBar.position.y, meshLeftBar.position.z));\n    let quaternion1 = new THREE.Quaternion();\n\tquaternion1.setFromAxisAngle(new THREE.Vector3( 0, 1, 0 ), -Math.PI/2);\n\ttransform1.setRotation(new Ammo.btQuaternion( quaternion1.x, quaternion1.y, quaternion1.z, quaternion1.w ));\n\tcompoundShape.addChildShape(transform1, leftBarShape);\n\t// 2.RightBar\n\tlet transform2 = new Ammo.btTransform();\n\ttransform2.setIdentity();\n\ttransform2.setOrigin(new Ammo.btVector3(meshRightBar.position.x, meshRightBar.position.y, meshRightBar.position.z));\n    let quaternion2 = new THREE.Quaternion();\n\tquaternion2.setFromAxisAngle(new THREE.Vector3( 0, 1, 0 ), Math.PI/4);\n\ttransform2.setRotation(new Ammo.btQuaternion( quaternion2.x, quaternion2.y, quaternion2.z, quaternion2.w ));\n\tcompoundShape.addChildShape(transform2, rightBarShape);\n    // 3.CenterBar\n\tlet transform3 = new Ammo.btTransform();\n\ttransform3.setIdentity();\n\ttransform3.setOrigin(new Ammo.btVector3(meshCenterBar.position.x, meshCenterBar.position.y, meshCenterBar.position.z));\n    let quaternion3 = new THREE.Quaternion();\n\tquaternion3.setFromAxisAngle(new THREE.Vector3( 0, 1, 0 ), Math.PI/10);\n\ttransform3.setRotation(new Ammo.btQuaternion( quaternion3.x, quaternion3.y, quaternion3.z, quaternion3.w ));\n\tcompoundShape.addChildShape(transform3, centerBarShape);\n\n\tlet rigidBody = createAmmoRigidBody(compoundShape, compoundMesh, 0.2, 0.9, position, mass);\n\tcompoundMesh.userData.physicsBody = rigidBody;\n\t// Legger til physics world:\n\tg_ammoPhysicsWorld.addRigidBody(\n\t\trigidBody,\n\t\tCOLLISION_GROUP_COMPOUND,\n\t\t\tCOLLISION_GROUP_COMPOUND |\n\t\t\tCOLLISION_GROUP_CONVEX |\n\t\t\tCOLLISION_GROUP_SPHERE |\n\t\t\tCOLLISION_GROUP_BOX |\n\t\t\tCOLLISION_GROUP_MOVEABLE |\n\t\t\tCOLLISION_GROUP_PLANE );\n\n\taddMeshToScene(compoundMesh);\n\tg_rigidBodies.push(compoundMesh);\n\trigidBody.threeMesh = compoundMesh;\n}","////////////////////////////////////////////////////////////////////////////////////\n// Koden for å etablere canonTriangleMesh basert på, inspirert av  kodeeksempel: //\n// del4/ammoAdvancedShapes2trianglemesh/helicopterTriangleMesh.js                 //\n////////////////////////////////////////////////////////////////////////////////////\n\nimport * as THREE from \"three\";\nimport {\n\tcreateAmmoRigidBody,\n\tg_rigidBodies,\n\tg_ammoPhysicsWorld,\n\tCOLLISION_GROUP_CONVEX,\n\tCOLLISION_GROUP_SPHERE,\n\tCOLLISION_GROUP_BOX,\n\tCOLLISION_GROUP_MOVEABLE,\n\tCOLLISION_GROUP_PLANE,\n    COLLISION_GROUP_COMPOUND,\n} from \"./myAmmoHelper.js\";\nimport {addMeshToScene} from \"./myThreeHelper.js\";\nimport {createTriangleShapeAddToCompound} from \"./triangleMeshHelpers.js\";\n\nexport async function createCanonTriangleMesh(mass = 0, color = 0xf78a1d, position={x:30, y:0.5, z:-10}) {\n\t//Ammo-container:\n\tlet compoundShape = new Ammo.btCompoundShape();\n\t//Three-container:\n\tlet groupMesh = new THREE.Group();\n\tgroupMesh.userData.tag = 'canon';\n\tgroupMesh.position.x = 0;\n\tgroupMesh.position.y = 0;\n\tgroupMesh.position.z = 0;\n\n    await createCanonParts(groupMesh, compoundShape);\n\n\t// Sett samme transformasjon på compoundShape som på bottomMesh:\n\tlet rigidBody = createAmmoRigidBody(compoundShape, groupMesh, 0.4, 0.3, position, mass);\n\tgroupMesh.userData.physicsBody = rigidBody;\n\t// Legger til physics world:\n\tg_ammoPhysicsWorld.addRigidBody(\n\t\trigidBody,\n\t\tCOLLISION_GROUP_COMPOUND,\n\t\tCOLLISION_GROUP_CONVEX | COLLISION_GROUP_SPHERE | COLLISION_GROUP_BOX | COLLISION_GROUP_MOVEABLE | COLLISION_GROUP_PLANE );\n\n\taddMeshToScene(groupMesh);\n\tg_rigidBodies.push(groupMesh);\n\trigidBody.threeMesh = groupMesh;\n}\n\nasync function createCanonParts(groupMesh, compoundShape){\n\t//Canon Base:\n    const width = 15;\n    const height = 1;\n    const depth = 7;\n\tlet canonBaseGeometry = new THREE.BoxGeometry(width, height, depth);\n\tlet canonBaseMaterial = new THREE.MeshPhongMaterial({ color:0x00de88});\n\tlet canonBaseMesh = new THREE.Mesh(canonBaseGeometry, canonBaseMaterial);\n\tcanonBaseMesh.name = \"canonBase\";\n    canonBaseMesh.rotation.y = Math.PI / 2;\n\tcanonBaseMesh.position.x = 0;\n\tcanonBaseMesh.position.y = 0;\n\tcanonBaseMesh.position.z = 0;\n\tgroupMesh.add(canonBaseMesh);\n\tcreateTriangleShapeAddToCompound(compoundShape, canonBaseMesh);\n\n    //Informasjon ifm etablering av Tube Three.js er hentet fra: https://threejs.org/docs/#api/en/geometries/TubeGeometry\n    //Canon Tube:\n    class CannonTubeCurve extends THREE.Curve {\n        constructor( scale = 1 ) {\n            super();\n            this.scale = scale;\n        }\n        getPoint( t, optionalTarget = new THREE.Vector3() ) {\n            const tx = 1;\n            const ty = t*20;\n            const tz = 0;\n            return optionalTarget.set( tx, ty, tz ).multiplyScalar( this.scale );\n        }\n    }\n\n    let tubePath = new CannonTubeCurve(1);\n\tlet canonTubeGeometry = new THREE.TubeGeometry( tubePath, 20, 2.5, 8, false );\n\tlet canonTubeMaterial = new THREE.MeshPhongMaterial({color:0x00de88, side: THREE.DoubleSide, transparent: true, opacity: 0.6});\n\tlet canonTubeMesh = new THREE.Mesh(canonTubeGeometry, canonTubeMaterial);\n\tcanonTubeMesh.name = \"canonTube\";\n    canonTubeMesh.rotation.x = Math.PI / 5;\n\tcanonTubeMesh.position.x = -1;\n\tcanonTubeMesh.position.y = 0;\n\tcanonTubeMesh.position.z = 3;\n\tgroupMesh.add(canonTubeMesh);\n\tcreateTriangleShapeAddToCompound(compoundShape, canonTubeMesh);\n}","//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Koden for å etablere hingedPicture basert på, insprirert av  kodeeksempel:                               //\n// del4/ammoConstraints/hingedarm.js og pendulum.js (eksamen22)                                             //\n// Bruk av colission.Response er basert på koden fra sphere.js                                              //\n// Bruk av TextureLoader er basert på koden fra del4/ammoAdvancedShapes2trianglemesh/helicopterTriangleMesh //\n// Bruk av AudioLoader for a lage lyd er hentet fra https://threejs.org/docs/#api/en/audio/Audio            //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nimport * as THREE from \"three\";\nimport {createAmmoRigidBody, g_ammoPhysicsWorld, g_rigidBodies} from \"./myAmmoHelper\";\nimport {addMeshToScene} from \"./myThreeHelper\";\nimport {createParticles} from \"./particles\";\n\nimport {\n\tCOLLISION_GROUP_SPHERE_ANCHOR,\n\tCOLLISION_GROUP_BOX,\n\tCOLLISION_GROUP_PLANE,\n\tCOLLISION_GROUP_SPHERE\n} from \"./myAmmoHelper\";\n\nconst CC_DISTANCE = 50;\n\nexport async function createHingedPicture(sound) {\n\tconst rigidBodyAnchor = await createHingedPictureAnchor();\n\tconst rigidBodyArm = await createHingedPictureFrame(sound);\n\taddHingedPictureConstraint(rigidBodyAnchor, rigidBodyArm, CC_DISTANCE);\n}\n\nfunction addHingedPictureConstraint(rigidBody1, rigidBody2, cc_dist) {\n\tconst anchorPivot = new Ammo.btVector3( 0, 0, 0 );\n\tconst anchorAxis = new Ammo.btVector3(1,0,0);\n\tconst armPivot = new Ammo.btVector3( 0, cc_dist, 0 );\n\tconst armAxis = new Ammo.btVector3(1,0,0);\n\tconst hingeConstraint = new Ammo.btHingeConstraint(\n\t\trigidBody1,\n\t\trigidBody2,\n\t\tanchorPivot,\n\t\tarmPivot,\n\t\tanchorAxis,\n\t\tarmAxis,\n\t\tfalse\n\t);\n\n\tconst lowerLimit = -Math.PI/6;\n\tconst upperLimit = Math.PI/6;\n\tconst softness = 0.8;\n\tconst biasFactor = 0.25;\n\tconst relaxationFactor = 1.0;\n\thingeConstraint.setLimit( lowerLimit, upperLimit, softness, biasFactor, relaxationFactor);\n\thingeConstraint.enableAngularMotor(true, 0, 0.5);\n\tg_ammoPhysicsWorld.addConstraint( hingeConstraint, false );\n}\n\nasync function createHingedPictureAnchor() {\n    let position = {x:30, y:80, z:20};\n    const radius = 2;\n\tconst wSeg = 25;\n\tconst hSeg = 25;\n\tconst massPictureAnchor = 0;\n\tconst meshPictureAnchor = new THREE.Mesh(\n\t\tnew THREE.SphereGeometry(radius, wSeg, hSeg),\n\t\tnew THREE.MeshStandardMaterial({color: 0xfd9c68}));\n\tmeshPictureAnchor.name = 'pictureAnchor';\n\tmeshPictureAnchor.position.set(position.x, position.y, position.z);\n\tmeshPictureAnchor.castShadow = true;\n\tmeshPictureAnchor.receiveShadow = true;\n\n\t//AMMO\n\tconst shapePictureAnchor = new Ammo.btSphereShape(meshPictureAnchor.geometry.parameters.radius);\n\tshapePictureAnchor.setMargin( 0.05 );\n\tconst rigidBody = createAmmoRigidBody(shapePictureAnchor, meshPictureAnchor, 0.4, 0.6, position, massPictureAnchor);\n\tmeshPictureAnchor.userData.physicsBody = rigidBody;\n\tg_ammoPhysicsWorld.addRigidBody(\n\t\trigidBody,\n\t\tCOLLISION_GROUP_SPHERE_ANCHOR,\n\t\t    COLLISION_GROUP_SPHERE | \n            COLLISION_GROUP_BOX | \n            COLLISION_GROUP_PLANE );\n\tg_rigidBodies.push(meshPictureAnchor);\n\trigidBody.threeMesh = meshPictureAnchor;\n\n\taddMeshToScene(meshPictureAnchor);\n\tg_rigidBodies.push(meshPictureAnchor);\n\trigidBody.threeMesh = meshPictureAnchor;\n\n\treturn rigidBody;\n}\n\nasync function createHingedPictureFrame(sound) {\n\tconst massPictureFrame=5;\n\tconst width = 20;\n\tconst height = 20;\n\tconst depth = 0.5;\n\tlet position = {x:30, y:30, z:20};\n\n\t//THREE\n\tlet audioLoader = new THREE.AudioLoader();\n\tconst loader = new THREE.TextureLoader();\n    // glass_window.jpg bilde er hentet fra: \n    // https://depositphotos.com/42046701/stock-photo-smooth-gradient-background-sheet-of.html\n\tconst pictureTexture = await loader.loadAsync('../../../assets/textures/glass_window.jpg');\n\n\tconst meshPictureFrame = new THREE.Mesh(\n\t\tnew THREE.BoxGeometry(width, height, depth),\n\t\tnew THREE.MeshPhongMaterial({map: pictureTexture }));\n\tmeshPictureFrame.name = 'pictureWindow';\n\tmeshPictureFrame.position.set(position.x, position.y, position.z);\n\tmeshPictureFrame.castShadow = true;\n\tmeshPictureFrame.receiveShadow = true;\n\tlet hasNotPlayed = true;\n\tmeshPictureFrame.collisionResponse = (mesh1) => {\n\t\tif (hasNotPlayed) {\n\t\t\tupdateTexture(mesh1);\n\t\t\tplaySound(audioLoader, sound);\n\t\t\tcreateParticles();\n\t\t}\n\t\thasNotPlayed = false;\n\t};\n\n\t//AMMO\n\tconst shapePictureFrame = new Ammo.btBoxShape( new Ammo.btVector3( width/2, height/2, depth/2) );\n\tshapePictureFrame.setMargin( 0.05 );\n\tconst rigidBody = createAmmoRigidBody(shapePictureFrame, meshPictureFrame, 0.7, 0.8, position, massPictureFrame);\n\tmeshPictureFrame.userData.physicsBody = rigidBody;\n\tg_ammoPhysicsWorld.addRigidBody(\n\t\trigidBody,\n\t\tCOLLISION_GROUP_BOX,\n\t\t    COLLISION_GROUP_SPHERE_ANCHOR |\n            COLLISION_GROUP_SPHERE | \n            COLLISION_GROUP_BOX | \n            COLLISION_GROUP_PLANE );\n\tg_rigidBodies.push(meshPictureFrame);\n\trigidBody.threeMesh = meshPictureFrame;\n\n\taddMeshToScene(meshPictureFrame);\n\tg_rigidBodies.push(meshPictureFrame);\n\trigidBody.threeMesh = meshPictureFrame;\n\treturn rigidBody;\n}\n\nasync function updateTexture(mesh){\n\t// bruk av AudioLoader er hentet fra https://threejs.org/docs/#api/en/audio/Audio\n\tconst loader = new THREE.TextureLoader();\n\t// glass_window.jpg bilde er hentet fra: \n    // https://depositphotos.com/42046701/stock-photo-smooth-gradient-background-sheet-of.html\n\tconst pictureFrameTexture = await loader.loadAsync('../../../assets/textures/glass_window_broken.jpg');\n\tmesh.material.map = pictureFrameTexture;\n\tmesh.material.needsUpdate = true;\n}\n\nasync function playSound(audioLoader, sound) {\n\t// Big-Glass-Breaking.mp3 fil er hentet fra \n\t// https://www.fesliyanstudios.com/royalty-free-sound-effects-download/glass-shattering-and-breaking-124\n\tawait audioLoader.load('../../../assets/sounds/Big-Glass-Breaking.mp3', function(buffer) {\n\t\tsound.setBuffer(buffer);\n\t\tsound.setLoop(false);\n\t\tsound.setVolume(0.2);\n\t\tsound.play()\n\t});\n}","import * as THREE from \"three\";\nimport {addMeshToScene} from \"./myThreeHelper\";\n///////////////////////////////////////////////////////////////////////////////\n// Koden for partikler er hentet i sin helhet fra kodeeksempel particles1.js //\n///////////////////////////////////////////////////////////////////////////////\nexport async function createParticles() {\n\t//Materiale:\n\tlet material = new THREE.PointsMaterial({\n\t\tsize: 1,                //Paticle size\n\t\tvertexColors : true\n\t});\n\n\t// Liste med vertekser:\n\tlet range = 2000;\n\tlet vertices = [];\n\tlet colors = [];\n\tlet color = new THREE.Color();\n\tlet x,y,z;\n\tfor (let i = 0; i < 15000; i++) {\n\t\tx = THREE.MathUtils.randFloatSpread( range );\n\t\ty = THREE.MathUtils.randFloatSpread( range );\n\t\tz = THREE.MathUtils.randFloatSpread( range );\n\t\tvertices.push( x, y, z );\n\t\tcolor.setHex(Math.random() * 0xffffff);\n\t\tcolors.push(color.r, color.g, color.b);\n\t}\n\t// Geometri:\n\tconst geometry = new THREE.BufferGeometry();\n\tgeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n\tgeometry.setAttribute( 'color', new THREE.Float32BufferAttribute( colors, 3 ) );\n\tlet points = new THREE.Points(geometry, material);\n\taddMeshToScene(points);\n}","////////////////////////////////////////////////////////////////////////\n//// GrassPlane som lager en planeMesh med variert høyde, basert på //\n//// implementasjon fra eksamen 2022.                                 //\n\nimport * as THREE from \"three\";\nimport {addMeshToScene} from \"./myThreeHelper.js\";\n\nexport async function createGrassPlane(x = 10, y = 10, position = {x: 0, y: 0, z: 0}) {\n    let texture = await new THREE.TextureLoader().load(\"../../../assets/textures/green_grass.jpg\");\n    let geometry = new THREE.PlaneGeometry(x, y, 10, 10);\n    let material = new THREE.MeshPhongMaterial({map: texture});\n    material.side = THREE.DoubleSide;\n    // geometry.rotateX(-Math.PI / 2);\n    let planeMesh = new THREE.Mesh(geometry, material);\n    planeMesh.name = \"grassMesh\";\n    planeMesh.rotation.x = Math.PI / 2;\n    planeMesh.position.set(position.x, position.y, position.z);\n\n    setRandomHeights(geometry);\n\n    addMeshToScene(planeMesh)\n}\n\nfunction setRandomHeights(geometry, scale= 1) {\n    const vertexPositions = geometry.attributes.position.array;\n    for (let i = 0; i < vertexPositions.length; i += 3) {\n        vertexPositions[i + 2] = Math.random() * scale - scale / 2;\n    }\n    geometry.attributes.position.needsUpdate = true;\n    geometry.computeVertexNormals();\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t242: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk\"] = self[\"webpackChunk\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [106], () => (__webpack_require__(415)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","g_scene","g_camera","g_renderer","g_controls","g_lilGui","count","g_models","onWindowResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","handleResize","renderScene","addMeshToScene","mesh","add","render","g_transform","g_checkCollisions","COLLISION_GROUP_COMPOUND","g_ammoPhysicsWorld","g_rigidBodies","createAmmoRigidBody","shape","threeMesh","restitution","friction","position","x","y","z","mass","transform","Ammo","btTransform","setIdentity","setOrigin","btVector3","quaternion","setRotation","btQuaternion","w","scale","setLocalScaling","motionState","btDefaultMotionState","localInertia","calculateLocalInertia","rbInfo","btRigidBodyConstructionInfo","rigidBody","btRigidBody","setRestitution","setFriction","g_clock","g_xzPlaneSideLength","createSphere","radius","color","name","THREE","set","castShadow","receiveShadow","collisionResponse","mesh1","material","setHex","Math","random","btSphereShape","geometry","parameters","setMargin","userData","physicsBody","addRigidBody","COLLISION_GROUP_SPHERE","push","createTriangleShapeAddToCompound","compoundShape","useConvexShape","triangleShape","vertices","traverseModel","ammoMesh","btTriangleMesh","i","length","v1_x","v1_y","v1_z","v2_x","v2_y","v2_z","v3_x","v3_y","v3_z","bv1","bv2","bv3","addTriangle","btBvhTriangleMeshShape","threeScale","generateTriangleShape","shapeTrans","quat","addChildShape","addToCompound","modelVertices","scaleFactor","tmpVertices","attributes","array","console","log","type","String","parentScale","children","forEach","childMesh","ndx","async","playSound","audioLoader","sound","load","buffer","setBuffer","setLoop","setVolume","play","TubeCurve","constructor","super","this","getPoint","t","optionalTarget","tx","sin","PI","ty","cos","tz","multiplyScalar","g_currentlyPressedKeys","handleKeyUp","event","code","handleKeyDown","animate","currentTime","myThreeScene","myAmmoPhysicsWorld","requestAnimationFrame","deltaTime","getDelta","line1MeshPosition1","getObjectByName","line1MeshPosition2","line2MeshPosition1","line2MeshPosition2","line1Mesh","line2Mesh","line1VertexPositions","line2VertexPositions","frameWidth","width","line1Pos1","line2Pos1","getWorldPosition","line1Pos2","line2Pos2","needsUpdate","computeBoundingBox","computeBoundingSphere","update","updateThree","stepSimulation","getMotionState","getWorldTransform","p","getOrigin","q","getRotation","numManifolds","getDispatcher","getNumManifolds","contactManifold","getManifoldByIndexInternal","numContacts","getNumContacts","rbObject0","castObject","getBody0","rbObject1","getBody1","threeMesh0","threeMesh1","j","contactPoint","getContactPoint","distance","getDistance","includes","velocity0","getLinearVelocity","velocity1","worldPos0","get_m_positionWorldOnA","worldPos1","get_m_positionWorldOnB","localPos0","get_m_localPointA","localPos1","get_m_localPointB","manifoldIndex","contactIndex","object0","tag","velocity","worldPos","localPos","object1","checkCollisions","updatePhysics","delta","canonBallMesh","lastBrick","direction","relativeVector","impulseVector","activate","applyImpulse","movableGate","movableMesh","setWorldTransform","moveRigidBody","handleKeys","then","AmmoLib","canvas","document","createElement","body","appendChild","antialias","setClearColor","shadowMap","enabled","shadowMapSoft","background","GUI","directions","materialArray","map","side","boxGeometry","boxMesh","addSkybox","ambientLight","visible","ambientFolder","addFolder","min","max","step","addColor","directionalLight","shadow","camera","near","far","left","right","top","bottom","directionalFolder","addLights","OrbitControls","domElement","target","addEventListener","createThreeScene","collisionConfiguration","btDefaultCollisionConfiguration","dispatcher","btCollisionDispatcher","overlappingPairCache","btDbvtBroadphase","solver","btSequentialImpulseConstraintSolver","btDiscreteDynamicsWorld","setGravity","createAmmoWorld","manager","onLoad","Object","values","model","index","clonedScene","SkeletonUtils","gltf","scene","root","pc_nightmare_mushroom","url","pc_nightmare_mushroom1","pc_nightmare_mushroom2","pc_nightmare_mushroom3","gltfLoader","GLTFLoader","loadModels","listener","xzPlaneSideLength","rotateX","btBoxShape","createXZPlane","height","depth","setCollisionFlags","getCollisionFlags","setActivationState","createMovableGate","rigidBodyBeam","beamSize","beamPosition","pocketBlockSize","pocketBlockPosition","compoundMesh","geometryBeam","meshBeam","rotateY","geometryBlock1","meshBlock1","geometryBlock2","meshBlock2","geometryBlock3","meshBlock3","geometryBlock4","meshBlock4","btCompoundShape","beamShape","pocketBlockShape","transform1","quaternion1","setFromAxisAngle","transform2","transform3","quaternion3","transform4","quaternion4","transform5","setDamping","createCompoundBeam","rigidBodyAnchor","anchorSize","anchorPosition","geometryAnchor","rotateZ","anchorShape","btCylinderShape","createAnchor","beamHalfHeight","anchorRadius","radiusTop","anchorPivot","anchorAxis","beamPivot","beamAxis","hingeConstraint","btHingeConstraint","lowerLimit","upperLimit","setLimit","enableAngularMotor","addConstraint","createHingedSeesaw","loader","wallTexture","loadAsync","COLLISION_GROUP_BOX","createWall","groupMesh","boxBottomOffset","startBoxGeometry","startBoxVertices","Float32Array","setAttribute","startBoxMaterial","transparent","opacity","startBoxMesh","createFunnelParts","COLLISION_GROUP_CONVEX","createFunnelTriangleMesh","copy","textureLoader","path","tubeGeometry","tubeMaterial","tubeMesh","rotation","tubePlatform","redHex","platformGeometry","platformMaterial","platformMesh","barrierGeometry","barrierMaterial","barrierMesh","secondBarrierGeometry","secondBarrierMaterial","secondBarrierMesh","createSlidingTubeParts","createSlidingTubeTriangleMesh","geometryLeftBar","meshLeftBar","geometryRightBar","meshRightBar","geometryCenterBar","meshCenterBar","leftBarShape","lWidth","lHeight","lDepth","rightBarShape","rWidth","rHeight","rDepth","centerBarShape","sWidth","sHeight","sDepth","quaternion2","createCompoundStopperBar","center","circlePathRad","startAngle","angleOfRot","brickHeight","brickMesh","toString","brickShape","brickWidth","brickDepth","hasRun","r","createBricks","canonBaseGeometry","canonBaseMaterial","canonBaseMesh","CannonTubeCurve","tubePath","canonTubeGeometry","canonTubeMaterial","canonTubeMesh","createCanonParts","createCanonTriangleMesh","meshPictureAnchor","shapePictureAnchor","createHingedPictureAnchor","rigidBodyArm","pictureTexture","meshPictureFrame","hasNotPlayed","pictureFrameTexture","updateTexture","size","vertexColors","range","colors","g","b","createParticles","shapePictureFrame","COLLISION_GROUP_SPHERE_ANCHOR","createHingedPictureFrame","rigidBody1","rigidBody2","cc_dist","armPivot","armAxis","addHingedPictureConstraint","createHingedPicture","nameMesh1","nameMesh2","lineMaterial","points1","points2","startPoint1","endPoint1","startPoint2","endPoint2","lineGeometry1","setFromPoints","lineGeometry2","pictureFrameLineMesh1","pictureFrameLineMesh2","addTwoLines","texture","planeMesh","vertexPositions","computeVertexNormals","setRandomHeights","createGrassPlane","addAmmoSceneObjects","main","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","keys","every","key","splice","d","definition","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}